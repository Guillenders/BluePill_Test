
BluePill_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e98  08007e98  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007e98  08007e98  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e98  08007e98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000078  08007f18  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007f18  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017153  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e2c  00000000  00000000  00037237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001140  00000000  00000000  0003c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2c0  00000000  00000000  0003d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2b4  00000000  00000000  00058a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096bd2  00000000  00000000  00075d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006048  00000000  00000000  0010c920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00112968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d9c 	.word	0x08007d9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08007d9c 	.word	0x08007d9c

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 feaf 	bl	8001eec <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 fa56 	bl	8001644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f002 fa09 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 fa46 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000094 	.word	0x20000094
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <MX_ADC2_Init+0x74>)
 8000206:	f001 fe71 	bl	8001eec <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f001 fa18 	bl	8001644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000214:	2303      	movs	r3, #3
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_ADC2_Init+0x74>)
 8000226:	f002 f9cb 	bl	80025c0 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f001 fa08 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000c4 	.word	0x200000c4
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	; 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a30      	ldr	r2, [pc, #192]	; (8000320 <HAL_ADC_MspInit+0xdc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d12a      	bne.n	80002ba <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b29      	ldr	r3, [pc, #164]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a28      	ldr	r2, [pc, #160]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000294:	2302      	movs	r3, #2
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4821      	ldr	r0, [pc, #132]	; (8000328 <HAL_ADC_MspInit+0xe4>)
 80002a4:	f002 fce6 	bl	8002c74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	2012      	movs	r0, #18
 80002ae:	f002 fcaa 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80002b2:	2012      	movs	r0, #18
 80002b4:	f002 fcc3 	bl	8002c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002b8:	e02e      	b.n	8000318 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a1b      	ldr	r2, [pc, #108]	; (800032c <HAL_ADC_MspInit+0xe8>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d129      	bne.n	8000318 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HAL_ADC_MspInit+0xe0>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002f4:	2308      	movs	r3, #8
 80002f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4619      	mov	r1, r3
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <HAL_ADC_MspInit+0xe4>)
 8000304:	f002 fcb6 	bl	8002c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	2012      	movs	r0, #18
 800030e:	f002 fc7a 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000312:	2012      	movs	r0, #18
 8000314:	f002 fc93 	bl	8002c3e <HAL_NVIC_EnableIRQ>
}
 8000318:	bf00      	nop
 800031a:	3728      	adds	r7, #40	; 0x28
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40012400 	.word	0x40012400
 8000324:	40021000 	.word	0x40021000
 8000328:	40010800 	.word	0x40010800
 800032c:	40012800 	.word	0x40012800

08000330 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2110      	movs	r1, #16
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <SELECT+0x18>)
 800033a:	f002 fe1f 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f001 fdb0 	bl	8001ea4 <HAL_Delay>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40010800 	.word	0x40010800

0800034c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <DESELECT+0x18>)
 8000356:	f002 fe11 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f001 fda2 	bl	8001ea4 <HAL_Delay>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010800 	.word	0x40010800

08000368 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000372:	bf00      	nop
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <SPI_TxByte+0x30>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f003 0302 	and.w	r3, r3, #2
 800037e:	2b02      	cmp	r3, #2
 8000380:	d1f8      	bne.n	8000374 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000382:	1df9      	adds	r1, r7, #7
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	2201      	movs	r2, #1
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <SPI_TxByte+0x30>)
 800038a:	f005 fa53 	bl	8005834 <HAL_SPI_Transmit>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000164 	.word	0x20000164

0800039c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003a8:	bf00      	nop
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <SPI_TxBuffer+0x30>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f003 0302 	and.w	r3, r3, #2
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d1f8      	bne.n	80003aa <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80003b8:	887a      	ldrh	r2, [r7, #2]
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <SPI_TxBuffer+0x30>)
 80003c0:	f005 fa38 	bl	8005834 <HAL_SPI_Transmit>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000164 	.word	0x20000164

080003d0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80003d6:	23ff      	movs	r3, #255	; 0xff
 80003d8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80003da:	bf00      	nop
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <SPI_RxByte+0x34>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d1f8      	bne.n	80003dc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80003ea:	1dba      	adds	r2, r7, #6
 80003ec:	1df9      	adds	r1, r7, #7
 80003ee:	2364      	movs	r3, #100	; 0x64
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2301      	movs	r3, #1
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <SPI_RxByte+0x34>)
 80003f6:	f005 fb60 	bl	8005aba <HAL_SPI_TransmitReceive>

	return data;
 80003fa:	79bb      	ldrb	r3, [r7, #6]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000164 	.word	0x20000164

08000408 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000410:	f7ff ffde 	bl	80003d0 <SPI_RxByte>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	701a      	strb	r2, [r3, #0]
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <SD_ReadyWait+0x30>)
 800042c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000430:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000432:	f7ff ffcd 	bl	80003d0 <SPI_RxByte>
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2bff      	cmp	r3, #255	; 0xff
 800043e:	d003      	beq.n	8000448 <SD_ReadyWait+0x24>
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SD_ReadyWait+0x30>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f4      	bne.n	8000432 <SD_ReadyWait+0xe>

	return res;
 8000448:	79fb      	ldrb	r3, [r7, #7]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000f6 	.word	0x200000f6

08000458 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800045e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000462:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000464:	f7ff ff72 	bl	800034c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	e005      	b.n	800047a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800046e:	20ff      	movs	r0, #255	; 0xff
 8000470:	f7ff ff7a 	bl	8000368 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	3301      	adds	r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b09      	cmp	r3, #9
 800047e:	ddf6      	ble.n	800046e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000480:	f7ff ff56 	bl	8000330 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000484:	2340      	movs	r3, #64	; 0x40
 8000486:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000498:	2395      	movs	r3, #149	; 0x95
 800049a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800049c:	463b      	mov	r3, r7
 800049e:	2106      	movs	r1, #6
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff7b 	bl	800039c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80004a6:	e002      	b.n	80004ae <SD_PowerOn+0x56>
	{
		cnt--;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80004ae:	f7ff ff8f 	bl	80003d0 <SPI_RxByte>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d002      	beq.n	80004be <SD_PowerOn+0x66>
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1f4      	bne.n	80004a8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80004be:	f7ff ff45 	bl	800034c <DESELECT>
	SPI_TxByte(0XFF);
 80004c2:	20ff      	movs	r0, #255	; 0xff
 80004c4:	f7ff ff50 	bl	8000368 <SPI_TxByte>

	PowerFlag = 1;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <SD_PowerOn+0x80>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000f9 	.word	0x200000f9

080004dc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <SD_PowerOff+0x14>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	200000f9 	.word	0x200000f9

080004f4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <SD_CheckPower+0x10>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	200000f9 	.word	0x200000f9

08000508 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <SD_RxDataBlock+0x58>)
 8000514:	22c8      	movs	r2, #200	; 0xc8
 8000516:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000518:	f7ff ff5a 	bl	80003d0 <SPI_RxByte>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2bff      	cmp	r3, #255	; 0xff
 8000524:	d103      	bne.n	800052e <SD_RxDataBlock+0x26>
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <SD_RxDataBlock+0x58>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d1f4      	bne.n	8000518 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	d001      	beq.n	8000538 <SD_RxDataBlock+0x30>
 8000534:	2300      	movs	r3, #0
 8000536:	e00f      	b.n	8000558 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff62 	bl	8000408 <SPI_RxBytePtr>
	} while(len--);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	603a      	str	r2, [r7, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f4      	bne.n	8000538 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800054e:	f7ff ff3f 	bl	80003d0 <SPI_RxByte>
	SPI_RxByte();
 8000552:	f7ff ff3d 	bl	80003d0 <SPI_RxByte>

	return TRUE;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000f4 	.word	0x200000f4

08000564 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000574:	f7ff ff56 	bl	8000424 <SD_ReadyWait>
 8000578:	4603      	mov	r3, r0
 800057a:	2bff      	cmp	r3, #255	; 0xff
 800057c:	d001      	beq.n	8000582 <SD_TxDataBlock+0x1e>
 800057e:	2300      	movs	r3, #0
 8000580:	e02f      	b.n	80005e2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff feef 	bl	8000368 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	2bfd      	cmp	r3, #253	; 0xfd
 800058e:	d020      	beq.n	80005d2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ff01 	bl	800039c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800059a:	f7ff ff19 	bl	80003d0 <SPI_RxByte>
		SPI_RxByte();
 800059e:	f7ff ff17 	bl	80003d0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80005a2:	e00b      	b.n	80005bc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80005a4:	f7ff ff14 	bl	80003d0 <SPI_RxByte>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f003 031f 	and.w	r3, r3, #31
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d006      	beq.n	80005c4 <SD_TxDataBlock+0x60>
			i++;
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	3301      	adds	r3, #1
 80005ba:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	2b40      	cmp	r3, #64	; 0x40
 80005c0:	d9f0      	bls.n	80005a4 <SD_TxDataBlock+0x40>
 80005c2:	e000      	b.n	80005c6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80005c4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80005c6:	bf00      	nop
 80005c8:	f7ff ff02 	bl	80003d0 <SPI_RxByte>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0fa      	beq.n	80005c8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f003 031f 	and.w	r3, r3, #31
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d101      	bne.n	80005e0 <SD_TxDataBlock+0x7c>
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	6039      	str	r1, [r7, #0]
 80005f4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80005f6:	f7ff ff15 	bl	8000424 <SD_ReadyWait>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2bff      	cmp	r3, #255	; 0xff
 80005fe:	d001      	beq.n	8000604 <SD_SendCmd+0x1a>
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	e042      	b.n	800068a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff feae 	bl	8000368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fea8 	bl	8000368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fea2 	bl	8000368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe9c 	bl	8000368 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fe97 	bl	8000368 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b40      	cmp	r3, #64	; 0x40
 800063e:	d102      	bne.n	8000646 <SD_SendCmd+0x5c>
 8000640:	2395      	movs	r3, #149	; 0x95
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e007      	b.n	8000656 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b48      	cmp	r3, #72	; 0x48
 800064a:	d102      	bne.n	8000652 <SD_SendCmd+0x68>
 800064c:	2387      	movs	r3, #135	; 0x87
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e001      	b.n	8000656 <SD_SendCmd+0x6c>
	else crc = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe85 	bl	8000368 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b4c      	cmp	r3, #76	; 0x4c
 8000662:	d101      	bne.n	8000668 <SD_SendCmd+0x7e>
 8000664:	f7ff feb4 	bl	80003d0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000668:	230a      	movs	r3, #10
 800066a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800066c:	f7ff feb0 	bl	80003d0 <SPI_RxByte>
 8000670:	4603      	mov	r3, r0
 8000672:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000674:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da05      	bge.n	8000688 <SD_SendCmd+0x9e>
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	3b01      	subs	r3, #1
 8000680:	73bb      	strb	r3, [r7, #14]
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f1      	bne.n	800066c <SD_SendCmd+0x82>

	return res;
 8000688:	7b7b      	ldrb	r3, [r7, #13]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SD_disk_initialize+0x14>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e0d1      	b.n	800084c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80006a8:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <SD_disk_initialize+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <SD_disk_initialize+0x2a>
 80006b6:	4b67      	ldr	r3, [pc, #412]	; (8000854 <SD_disk_initialize+0x1c0>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	e0c6      	b.n	800084c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80006be:	f7ff fecb 	bl	8000458 <SD_PowerOn>

	/* slave select */
	SELECT();
 80006c2:	f7ff fe35 	bl	8000330 <SELECT>

	/* check disk type */
	type = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80006ca:	2100      	movs	r1, #0
 80006cc:	2040      	movs	r0, #64	; 0x40
 80006ce:	f7ff ff8c 	bl	80005ea <SD_SendCmd>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	f040 80a1 	bne.w	800081c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80006da:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <SD_disk_initialize+0x1c4>)
 80006dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80006e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80006e6:	2048      	movs	r0, #72	; 0x48
 80006e8:	f7ff ff7f 	bl	80005ea <SD_SendCmd>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d155      	bne.n	800079e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e00c      	b.n	8000712 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80006f8:	7bfc      	ldrb	r4, [r7, #15]
 80006fa:	f7ff fe69 	bl	80003d0 <SPI_RxByte>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	f104 0310 	add.w	r3, r4, #16
 8000706:	443b      	add	r3, r7
 8000708:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9ef      	bls.n	80006f8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000718:	7abb      	ldrb	r3, [r7, #10]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d17e      	bne.n	800081c <SD_disk_initialize+0x188>
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	2baa      	cmp	r3, #170	; 0xaa
 8000722:	d17b      	bne.n	800081c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000724:	2100      	movs	r1, #0
 8000726:	2077      	movs	r0, #119	; 0x77
 8000728:	f7ff ff5f 	bl	80005ea <SD_SendCmd>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d807      	bhi.n	8000742 <SD_disk_initialize+0xae>
 8000732:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000736:	2069      	movs	r0, #105	; 0x69
 8000738:	f7ff ff57 	bl	80005ea <SD_SendCmd>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000742:	4b45      	ldr	r3, [pc, #276]	; (8000858 <SD_disk_initialize+0x1c4>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1ec      	bne.n	8000724 <SD_disk_initialize+0x90>
 800074a:	e000      	b.n	800074e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800074c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800074e:	4b42      	ldr	r3, [pc, #264]	; (8000858 <SD_disk_initialize+0x1c4>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d062      	beq.n	800081c <SD_disk_initialize+0x188>
 8000756:	2100      	movs	r1, #0
 8000758:	207a      	movs	r0, #122	; 0x7a
 800075a:	f7ff ff46 	bl	80005ea <SD_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d15b      	bne.n	800081c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e00c      	b.n	8000784 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800076a:	7bfc      	ldrb	r4, [r7, #15]
 800076c:	f7ff fe30 	bl	80003d0 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	f104 0310 	add.w	r3, r4, #16
 8000778:	443b      	add	r3, r7
 800077a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	3301      	adds	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d9ef      	bls.n	800076a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800078a:	7a3b      	ldrb	r3, [r7, #8]
 800078c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SD_disk_initialize+0x104>
 8000794:	230c      	movs	r3, #12
 8000796:	e000      	b.n	800079a <SD_disk_initialize+0x106>
 8000798:	2304      	movs	r3, #4
 800079a:	73bb      	strb	r3, [r7, #14]
 800079c:	e03e      	b.n	800081c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800079e:	2100      	movs	r1, #0
 80007a0:	2077      	movs	r0, #119	; 0x77
 80007a2:	f7ff ff22 	bl	80005ea <SD_SendCmd>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d808      	bhi.n	80007be <SD_disk_initialize+0x12a>
 80007ac:	2100      	movs	r1, #0
 80007ae:	2069      	movs	r0, #105	; 0x69
 80007b0:	f7ff ff1b 	bl	80005ea <SD_SendCmd>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d801      	bhi.n	80007be <SD_disk_initialize+0x12a>
 80007ba:	2302      	movs	r3, #2
 80007bc:	e000      	b.n	80007c0 <SD_disk_initialize+0x12c>
 80007be:	2301      	movs	r3, #1
 80007c0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d10e      	bne.n	80007e6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80007c8:	2100      	movs	r1, #0
 80007ca:	2077      	movs	r0, #119	; 0x77
 80007cc:	f7ff ff0d 	bl	80005ea <SD_SendCmd>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d80e      	bhi.n	80007f4 <SD_disk_initialize+0x160>
 80007d6:	2100      	movs	r1, #0
 80007d8:	2069      	movs	r0, #105	; 0x69
 80007da:	f7ff ff06 	bl	80005ea <SD_SendCmd>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <SD_disk_initialize+0x160>
 80007e4:	e00c      	b.n	8000800 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80007e6:	2100      	movs	r1, #0
 80007e8:	2041      	movs	r0, #65	; 0x41
 80007ea:	f7ff fefe 	bl	80005ea <SD_SendCmd>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <SD_disk_initialize+0x1c4>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1e2      	bne.n	80007c2 <SD_disk_initialize+0x12e>
 80007fc:	e000      	b.n	8000800 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80007fe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <SD_disk_initialize+0x1c4>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <SD_disk_initialize+0x184>
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	2050      	movs	r0, #80	; 0x50
 800080e:	f7ff feec 	bl	80005ea <SD_SendCmd>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SD_disk_initialize+0x188>
 8000818:	2300      	movs	r3, #0
 800081a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800081c:	4a0f      	ldr	r2, [pc, #60]	; (800085c <SD_disk_initialize+0x1c8>)
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000822:	f7ff fd93 	bl	800034c <DESELECT>
	SPI_RxByte();
 8000826:	f7ff fdd3 	bl	80003d0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d008      	beq.n	8000842 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <SD_disk_initialize+0x1c0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SD_disk_initialize+0x1c0>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e001      	b.n	8000846 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000842:	f7ff fe4b 	bl	80004dc <SD_PowerOff>
	}

	return Stat;
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <SD_disk_initialize+0x1c0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	200000f4 	.word	0x200000f4
 800085c:	200000f8 	.word	0x200000f8

08000860 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SD_disk_status+0x14>
 8000870:	2301      	movs	r3, #1
 8000872:	e002      	b.n	800087a <SD_disk_status+0x1a>
	return Stat;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <SD_disk_status+0x24>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000000 	.word	0x20000000

08000888 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d102      	bne.n	80008a4 <SD_disk_read+0x1c>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <SD_disk_read+0x20>
 80008a4:	2304      	movs	r3, #4
 80008a6:	e051      	b.n	800094c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <SD_disk_read+0xcc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SD_disk_read+0x32>
 80008b6:	2303      	movs	r3, #3
 80008b8:	e048      	b.n	800094c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <SD_disk_read+0xd0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <SD_disk_read+0x44>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	025b      	lsls	r3, r3, #9
 80008ca:	607b      	str	r3, [r7, #4]

	SELECT();
 80008cc:	f7ff fd30 	bl	8000330 <SELECT>

	if (count == 1)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d111      	bne.n	80008fa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2051      	movs	r0, #81	; 0x51
 80008da:	f7ff fe86 	bl	80005ea <SD_SendCmd>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d129      	bne.n	8000938 <SD_disk_read+0xb0>
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f7ff fe0d 	bl	8000508 <SD_RxDataBlock>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d021      	beq.n	8000938 <SD_disk_read+0xb0>
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	e01e      	b.n	8000938 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2052      	movs	r0, #82	; 0x52
 80008fe:	f7ff fe74 	bl	80005ea <SD_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d117      	bne.n	8000938 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	68b8      	ldr	r0, [r7, #8]
 800090e:	f7ff fdfb 	bl	8000508 <SD_RxDataBlock>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00a      	beq.n	800092e <SD_disk_read+0xa6>
				buff += 512;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800091e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1ed      	bne.n	8000908 <SD_disk_read+0x80>
 800092c:	e000      	b.n	8000930 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800092e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	204c      	movs	r0, #76	; 0x4c
 8000934:	f7ff fe59 	bl	80005ea <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000938:	f7ff fd08 	bl	800034c <DESELECT>
	SPI_RxByte();
 800093c:	f7ff fd48 	bl	80003d0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2db      	uxtb	r3, r3
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	200000f8 	.word	0x200000f8

0800095c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <SD_disk_write+0x1c>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <SD_disk_write+0x20>
 8000978:	2304      	movs	r3, #4
 800097a:	e06b      	b.n	8000a54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <SD_disk_write+0x100>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SD_disk_write+0x32>
 800098a:	2303      	movs	r3, #3
 800098c:	e062      	b.n	8000a54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <SD_disk_write+0x100>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SD_disk_write+0x44>
 800099c:	2302      	movs	r3, #2
 800099e:	e059      	b.n	8000a54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <SD_disk_write+0x104>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <SD_disk_write+0x56>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	025b      	lsls	r3, r3, #9
 80009b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80009b2:	f7ff fcbd 	bl	8000330 <SELECT>

	if (count == 1)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d110      	bne.n	80009de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	2058      	movs	r0, #88	; 0x58
 80009c0:	f7ff fe13 	bl	80005ea <SD_SendCmd>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d13a      	bne.n	8000a40 <SD_disk_write+0xe4>
 80009ca:	21fe      	movs	r1, #254	; 0xfe
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f7ff fdc9 	bl	8000564 <SD_TxDataBlock>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d033      	beq.n	8000a40 <SD_disk_write+0xe4>
			count = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	e030      	b.n	8000a40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SD_disk_write+0x104>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2077      	movs	r0, #119	; 0x77
 80009ee:	f7ff fdfc 	bl	80005ea <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	2057      	movs	r0, #87	; 0x57
 80009f6:	f7ff fdf8 	bl	80005ea <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	2059      	movs	r0, #89	; 0x59
 80009fe:	f7ff fdf4 	bl	80005ea <SD_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11b      	bne.n	8000a40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000a08:	21fc      	movs	r1, #252	; 0xfc
 8000a0a:	68b8      	ldr	r0, [r7, #8]
 8000a0c:	f7ff fdaa 	bl	8000564 <SD_TxDataBlock>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00a      	beq.n	8000a2c <SD_disk_write+0xd0>
				buff += 512;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1ee      	bne.n	8000a08 <SD_disk_write+0xac>
 8000a2a:	e000      	b.n	8000a2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000a2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000a2e:	21fd      	movs	r1, #253	; 0xfd
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fd97 	bl	8000564 <SD_TxDataBlock>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000a40:	f7ff fc84 	bl	800034c <DESELECT>
	SPI_RxByte();
 8000a44:	f7ff fcc4 	bl	80003d0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	200000f8 	.word	0x200000f8

08000a64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b08b      	sub	sp, #44	; 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	603a      	str	r2, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	460b      	mov	r3, r1
 8000a72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SD_disk_ioctl+0x1e>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e115      	b.n	8000cae <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	d124      	bne.n	8000ad8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d012      	beq.n	8000abc <SD_disk_ioctl+0x58>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dc1a      	bgt.n	8000ad0 <SD_disk_ioctl+0x6c>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <SD_disk_ioctl+0x40>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d006      	beq.n	8000ab0 <SD_disk_ioctl+0x4c>
 8000aa2:	e015      	b.n	8000ad0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000aa4:	f7ff fd1a 	bl	80004dc <SD_PowerOff>
			res = RES_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000aae:	e0fc      	b.n	8000caa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ab0:	f7ff fcd2 	bl	8000458 <SD_PowerOn>
			res = RES_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000aba:	e0f6      	b.n	8000caa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	1c5c      	adds	r4, r3, #1
 8000ac0:	f7ff fd18 	bl	80004f4 <SD_CheckPower>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ace:	e0ec      	b.n	8000caa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ad6:	e0e8      	b.n	8000caa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ad8:	4b77      	ldr	r3, [pc, #476]	; (8000cb8 <SD_disk_ioctl+0x254>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SD_disk_ioctl+0x86>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e0e1      	b.n	8000cae <SD_disk_ioctl+0x24a>

		SELECT();
 8000aea:	f7ff fc21 	bl	8000330 <SELECT>

		switch (ctrl)
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	2b0d      	cmp	r3, #13
 8000af2:	f200 80cb 	bhi.w	8000c8c <SD_disk_ioctl+0x228>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <SD_disk_ioctl+0x98>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000bf7 	.word	0x08000bf7
 8000b00:	08000b35 	.word	0x08000b35
 8000b04:	08000be7 	.word	0x08000be7
 8000b08:	08000c8d 	.word	0x08000c8d
 8000b0c:	08000c8d 	.word	0x08000c8d
 8000b10:	08000c8d 	.word	0x08000c8d
 8000b14:	08000c8d 	.word	0x08000c8d
 8000b18:	08000c8d 	.word	0x08000c8d
 8000b1c:	08000c8d 	.word	0x08000c8d
 8000b20:	08000c8d 	.word	0x08000c8d
 8000b24:	08000c8d 	.word	0x08000c8d
 8000b28:	08000c09 	.word	0x08000c09
 8000b2c:	08000c2d 	.word	0x08000c2d
 8000b30:	08000c51 	.word	0x08000c51
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000b34:	2100      	movs	r1, #0
 8000b36:	2049      	movs	r0, #73	; 0x49
 8000b38:	f7ff fd57 	bl	80005ea <SD_SendCmd>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 80a8 	bne.w	8000c94 <SD_disk_ioctl+0x230>
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2110      	movs	r1, #16
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fcdc 	bl	8000508 <SD_RxDataBlock>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 809e 	beq.w	8000c94 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000b58:	7b3b      	ldrb	r3, [r7, #12]
 8000b5a:	099b      	lsrs	r3, r3, #6
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10e      	bne.n	8000b80 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000b62:	7d7b      	ldrb	r3, [r7, #21]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	7d3b      	ldrb	r3, [r7, #20]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000b76:	8bfb      	ldrh	r3, [r7, #30]
 8000b78:	029a      	lsls	r2, r3, #10
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e02e      	b.n	8000bde <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000b80:	7c7b      	ldrb	r3, [r7, #17]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	7dbb      	ldrb	r3, [r7, #22]
 8000b8a:	09db      	lsrs	r3, r3, #7
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	7d7b      	ldrb	r3, [r7, #21]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0306 	and.w	r3, r3, #6
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ba8:	7d3b      	ldrb	r3, [r7, #20]
 8000baa:	099b      	lsrs	r3, r3, #6
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	7cfb      	ldrb	r3, [r7, #19]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4413      	add	r3, r2
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	7cbb      	ldrb	r3, [r7, #18]
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3301      	adds	r3, #1
 8000bce:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000bd0:	8bfa      	ldrh	r2, [r7, #30]
 8000bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bd6:	3b09      	subs	r3, #9
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000be4:	e056      	b.n	8000c94 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bec:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf4:	e055      	b.n	8000ca2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000bf6:	f7ff fc15 	bl	8000424 <SD_ReadyWait>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2bff      	cmp	r3, #255	; 0xff
 8000bfe:	d14b      	bne.n	8000c98 <SD_disk_ioctl+0x234>
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c06:	e047      	b.n	8000c98 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2049      	movs	r0, #73	; 0x49
 8000c0c:	f7ff fced 	bl	80005ea <SD_SendCmd>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d142      	bne.n	8000c9c <SD_disk_ioctl+0x238>
 8000c16:	2110      	movs	r1, #16
 8000c18:	6a38      	ldr	r0, [r7, #32]
 8000c1a:	f7ff fc75 	bl	8000508 <SD_RxDataBlock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d03b      	beq.n	8000c9c <SD_disk_ioctl+0x238>
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c2a:	e037      	b.n	8000c9c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	204a      	movs	r0, #74	; 0x4a
 8000c30:	f7ff fcdb 	bl	80005ea <SD_SendCmd>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d132      	bne.n	8000ca0 <SD_disk_ioctl+0x23c>
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	6a38      	ldr	r0, [r7, #32]
 8000c3e:	f7ff fc63 	bl	8000508 <SD_RxDataBlock>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02b      	beq.n	8000ca0 <SD_disk_ioctl+0x23c>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c4e:	e027      	b.n	8000ca0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000c50:	2100      	movs	r1, #0
 8000c52:	207a      	movs	r0, #122	; 0x7a
 8000c54:	f7ff fcc9 	bl	80005ea <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c64:	e00b      	b.n	8000c7e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000c66:	6a3c      	ldr	r4, [r7, #32]
 8000c68:	1c63      	adds	r3, r4, #1
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	f7ff fbb0 	bl	80003d0 <SPI_RxByte>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d9ef      	bls.n	8000c66 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c92:	e006      	b.n	8000ca2 <SD_disk_ioctl+0x23e>
			break;
 8000c94:	bf00      	nop
 8000c96:	e004      	b.n	8000ca2 <SD_disk_ioctl+0x23e>
			break;
 8000c98:	bf00      	nop
 8000c9a:	e002      	b.n	8000ca2 <SD_disk_ioctl+0x23e>
			break;
 8000c9c:	bf00      	nop
 8000c9e:	e000      	b.n	8000ca2 <SD_disk_ioctl+0x23e>
			break;
 8000ca0:	bf00      	nop
		}

		DESELECT();
 8000ca2:	f7ff fb53 	bl	800034c <DESELECT>
		SPI_RxByte();
 8000ca6:	f7ff fb93 	bl	80003d0 <SPI_RxByte>
	}

	return res;
 8000caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	372c      	adds	r7, #44	; 0x2c
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a2a      	ldr	r2, [pc, #168]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_GPIO_Init+0xf4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2114      	movs	r1, #20
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <MX_GPIO_Init+0xf8>)
 8000d36:	f002 f921 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <MX_GPIO_Init+0xfc>)
 8000d42:	f002 f91b 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000d46:	2314      	movs	r3, #20
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <MX_GPIO_Init+0xf8>)
 8000d5e:	f001 ff89 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d62:	2302      	movs	r3, #2
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_GPIO_Init+0x100>)
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <MX_GPIO_Init+0xfc>)
 8000d76:	f001 ff7d 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_GPIO_Init+0xfc>)
 8000d94:	f001 ff6e 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2007      	movs	r0, #7
 8000d9e:	f001 ff32 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f001 ff4b 	bl	8002c3e <HAL_NVIC_EnableIRQ>

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	10110000 	.word	0x10110000

08000dc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <MX_I2C1_Init+0x54>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x58>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dfe:	f002 f8ed 	bl	8002fdc <HAL_I2C_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e08:	f000 fc1c 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000fc 	.word	0x200000fc
 8000e14:	40005400 	.word	0x40005400
 8000e18:	000186a0 	.word	0x000186a0

08000e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_I2C_MspInit+0x90>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d132      	bne.n	8000ea2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e6a:	f001 ff03 	bl	8002c74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_I2C_MspInit+0x9c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_I2C_MspInit+0x9c>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e94:	61d3      	str	r3, [r2, #28]
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40010000 	.word	0x40010000

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b0a7      	sub	sp, #156	; 0x9c
 8000ec0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t MSG[100] = {'\0'};
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	2260      	movs	r2, #96	; 0x60
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fad2 	bl	8007478 <memset>
	int DISTANCE_value = 0, distance_offsetok = 0, FSR_offsetok = 0, FSR_value = 0, battery_lvl = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000eec:	2300      	movs	r3, #0
 8000eee:	677b      	str	r3, [r7, #116]	; 0x74
	int compression_count = 0, compression_active = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 ff72 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f900 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f7ff fedc 	bl	8000cbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f04:	f7ff ff5c 	bl	8000dc0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f08:	f000 fece 	bl	8001ca8 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000f0c:	f7ff f95c 	bl	80001c8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000f10:	f000 fd88 	bl	8001a24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f14:	f000 fdfc 	bl	8001b10 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f18:	f7ff f918 	bl	800014c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f1c:	f000 fc20 	bl	8001760 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f20:	f006 f9c4 	bl	80072ac <MX_FATFS_Init>
  MX_RTC_Init();
 8000f24:	f000 fb94 	bl	8001650 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  VL6180X_Init(); //load settings on to VL6180X.
 8000f28:	f000 f9a4 	bl	8001274 <VL6180X_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000f2c:	4869      	ldr	r0, [pc, #420]	; (80010d4 <main+0x218>)
 8000f2e:	f001 fcdb 	bl	80028e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);// Calibrate The ADC On Power-Up For Better Accuracy
 8000f32:	4869      	ldr	r0, [pc, #420]	; (80010d8 <main+0x21c>)
 8000f34:	f001 fcd8 	bl	80028e8 <HAL_ADCEx_Calibration_Start>
	  //AGREGAR LECTURA DE BATERIA, SI ES OK INICIAR ENSAYO, SINO INDICAR QUE LA BATERIA EST�? BAJA (LUZ O SONIDO?)
	// if(timer_1m >= 0.001 && timer_1m <= 750){startsound();	 }
	//  if(timer_1m >= 2200 && timer_1m <= 62200){ //ensayo de 1 minuto

		  //start sound buzzer
		  buzzer();
 8000f38:	f000 fad8 	bl	80014ec <buzzer>

		  // start single range measurement
		  VL6180X_Start_Range();
 8000f3c:	f000 fa84 	bl	8001448 <VL6180X_Start_Range>

		  // poll the VL6180X till new sample ready
		  VL6180X_Poll_Range();
 8000f40:	f000 fa8b 	bl	800145a <VL6180X_Poll_Range>

		  // Start ADC Conversion FOR FSR & Read batery lvl
		  HAL_ADC_Start(&hadc1);
 8000f44:	4863      	ldr	r0, [pc, #396]	; (80010d4 <main+0x218>)
 8000f46:	f001 f8a9 	bl	800209c <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);
 8000f4a:	4863      	ldr	r0, [pc, #396]	; (80010d8 <main+0x21c>)
 8000f4c:	f001 f8a6 	bl	800209c <HAL_ADC_Start>

		  // Poll ADC1&ADC2 Perihperal & TimeOut = 1mSec
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8000f50:	2101      	movs	r1, #1
 8000f52:	4860      	ldr	r0, [pc, #384]	; (80010d4 <main+0x218>)
 8000f54:	f001 f950 	bl	80021f8 <HAL_ADC_PollForConversion>
		  HAL_ADC_PollForConversion(&hadc2, 1);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	485f      	ldr	r0, [pc, #380]	; (80010d8 <main+0x21c>)
 8000f5c:	f001 f94c 	bl	80021f8 <HAL_ADC_PollForConversion>
		  battery_lvl = HAL_ADC_GetValue(&hadc1);
 8000f60:	485c      	ldr	r0, [pc, #368]	; (80010d4 <main+0x218>)
 8000f62:	f001 fa4f 	bl	8002404 <HAL_ADC_GetValue>
 8000f66:	4603      	mov	r3, r0
 8000f68:	677b      	str	r3, [r7, #116]	; 0x74



		  //funcion para obtener offset del sensor de distancia y FSR
		  if(init==1){
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <main+0x220>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <main+0xc6>
			  distance_offsetok = VL6180x_offset();
 8000f72:	f000 faed 	bl	8001550 <VL6180x_offset>
 8000f76:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			  FSR_offsetok = FSR_offset();
 8000f7a:	f000 fb0d 	bl	8001598 <FSR_offset>
 8000f7e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  }
		  init = 0;
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <main+0x220>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
		  //if (!archivo_abierto) {
		  	//			crear_archivo();
		  		//	}

		  // read range result in [mm] (AVG)
		  DISTANCE_value = 0, FSR_value = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  for(int a = 0; a < 10; a++){
 8000f94:	2300      	movs	r3, #0
 8000f96:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f98:	e013      	b.n	8000fc2 <main+0x106>
			 // VL6180X_Start_Range();
			//  VL6180X_Poll_Range();
			  DISTANCE_value += VL6180X_Read_Range();
 8000f9a:	f000 fa7f 	bl	800149c <VL6180X_Read_Range>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  FSR_value += HAL_ADC_GetValue(&hadc2);
 8000faa:	484b      	ldr	r0, [pc, #300]	; (80010d8 <main+0x21c>)
 8000fac:	f001 fa2a 	bl	8002404 <HAL_ADC_GetValue>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  for(int a = 0; a < 10; a++){
 8000fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	dde8      	ble.n	8000f9a <main+0xde>
			 // HAL_Delay(1); //estaba en 2, probar y despues probar sacandolo.
		  }


		  DISTANCE_value = distance_offsetok - (DISTANCE_value/10); //calculo de distancia restando el offset.
 8000fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fcc:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <main+0x224>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1092      	asrs	r2, r2, #2
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000fdc:	4413      	add	r3, r2
 8000fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  FSR_value = (FSR_value/10) - FSR_offsetok; //calculo FSR menos el offset
 8000fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fe6:	4a3e      	ldr	r2, [pc, #248]	; (80010e0 <main+0x224>)
 8000fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fec:	1092      	asrs	r2, r2, #2
 8000fee:	17db      	asrs	r3, r3, #31
 8000ff0:	1ad2      	subs	r2, r2, r3
 8000ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  if(DISTANCE_value < 0 ){DISTANCE_value = 0;} //esto es por si tira algun valor negativo (-2 x ej), pongo q directamente sea 0
 8000ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001000:	2b00      	cmp	r3, #0
 8001002:	da02      	bge.n	800100a <main+0x14e>
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  if(FSR_value < 0 ){FSR_value = 0;}
 800100a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800100e:	2b00      	cmp	r3, #0
 8001010:	da02      	bge.n	8001018 <main+0x15c>
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		  // Detección de compresión
		            if (DISTANCE_value >= MIN_RANGE_MEAS && DISTANCE_value <= MAX_RANGE_MEAS) {
 8001018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800101c:	2b0d      	cmp	r3, #13
 800101e:	dd09      	ble.n	8001034 <main+0x178>
 8001020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001024:	2b19      	cmp	r3, #25
 8001026:	dc05      	bgt.n	8001034 <main+0x178>
		                if (!compression_active) {
 8001028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14e      	bne.n	80010cc <main+0x210>
		                    compression_active = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	67fb      	str	r3, [r7, #124]	; 0x7c
		                if (!compression_active) {
 8001032:	e04b      	b.n	80010cc <main+0x210>
		                }
		            } else {
		                if (compression_active) {
 8001034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d048      	beq.n	80010cc <main+0x210>
		                    compression_active = 0; // Final de la compresión
 800103a:	2300      	movs	r3, #0
 800103c:	67fb      	str	r3, [r7, #124]	; 0x7c
		                    last_compression_times[compression_index] = HAL_GetTick();
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <main+0x228>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461c      	mov	r4, r3
 8001044:	f000 ff24 	bl	8001e90 <HAL_GetTick>
 8001048:	4603      	mov	r3, r0
 800104a:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <main+0x22c>)
 800104c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		                    compression_index = (compression_index + 1) % 10;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <main+0x228>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <main+0x224>)
 8001058:	fb83 1302 	smull	r1, r3, r3, r2
 800105c:	1099      	asrs	r1, r3, #2
 800105e:	17d3      	asrs	r3, r2, #31
 8001060:	1ac9      	subs	r1, r1, r3
 8001062:	460b      	mov	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1ad1      	subs	r1, r2, r3
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0x228>)
 8001070:	701a      	strb	r2, [r3, #0]
		                    if (DISTANCE_value > max_depth) {
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <main+0x230>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800107a:	429a      	cmp	r2, r3
 800107c:	dd03      	ble.n	8001086 <main+0x1ca>
		                  	  max_depth = DISTANCE_value; // Actualizar máxima profundidad alcanzada
 800107e:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <main+0x230>)
 8001080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001084:	6013      	str	r3, [r2, #0]
		                    }
		                    int frequency = calculate_frequency(); // Calcular frecuencia
 8001086:	f000 fab5 	bl	80015f4 <calculate_frequency>
 800108a:	66f8      	str	r0, [r7, #108]	; 0x6c

		                    // Enviar datos al finalizar la compresión
		                    const char* hand_position = (FSR_Check(FSR_value) == PASS_OK) ? "OK" : "NOK";
 800108c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001090:	b29b      	uxth	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fa18 	bl	80014c8 <FSR_Check>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <main+0x1e6>
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <main+0x234>)
 80010a0:	e000      	b.n	80010a4 <main+0x1e8>
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <main+0x238>)
 80010a4:	66bb      	str	r3, [r7, #104]	; 0x68
		                    sprintf(MSG, "\nUBICACION= %s MAX PROFUNDIDAD= %d FRECUENCIA= %d Hz", hand_position, max_depth, frequency);
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <main+0x230>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	1d38      	adds	r0, r7, #4
 80010ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80010b4:	4910      	ldr	r1, [pc, #64]	; (80010f8 <main+0x23c>)
 80010b6:	f006 f9bf 	bl	8007438 <siprintf>
		                    HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80010ba:	1d39      	adds	r1, r7, #4
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	2264      	movs	r2, #100	; 0x64
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <main+0x240>)
 80010c2:	f005 ff73 	bl	8006fac <HAL_UART_Transmit>

		                    max_depth = 0; // Reiniciar profundidad máxima para la siguiente compresión
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <main+0x230>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
		                }
		            }
		            //guardar_datos(MSG);
		            VL6180X_Clear_Interrupts();
 80010cc:	f000 f9f3 	bl	80014b6 <VL6180X_Clear_Interrupts>
		  buzzer();
 80010d0:	e732      	b.n	8000f38 <main+0x7c>
 80010d2:	bf00      	nop
 80010d4:	20000094 	.word	0x20000094
 80010d8:	200000c4 	.word	0x200000c4
 80010dc:	20000004 	.word	0x20000004
 80010e0:	66666667 	.word	0x66666667
 80010e4:	200001e4 	.word	0x200001e4
 80010e8:	200001bc 	.word	0x200001bc
 80010ec:	200001e8 	.word	0x200001e8
 80010f0:	08007db4 	.word	0x08007db4
 80010f4:	08007db8 	.word	0x08007db8
 80010f8:	08007dbc 	.word	0x08007dbc
 80010fc:	2000028c 	.word	0x2000028c

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 f9b2 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001130:	2309      	movs	r3, #9
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001142:	2301      	movs	r3, #1
 8001144:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2302      	movs	r3, #2
 8001148:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001150:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	4618      	mov	r0, r3
 800115c:	f002 ff7e 	bl	800405c <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001166:	f000 fa6d 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f003 f9e9 	bl	8004560 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001194:	f000 fa56 	bl	8001644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001198:	2303      	movs	r3, #3
 800119a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800119c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fb66 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011b6:	f000 fa45 	bl	8001644 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_EXTI_Callback>:
///////////////////////////////////////////////////////////////////
// ISR PIN_B1 PULL UP
// DESC.: START BUTTON.
///////////////////////////////////////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d102      	bne.n	80011da <HAL_GPIO_EXTI_Callback+0x16>
		HAL_TIM_Base_Start_IT(&htim3); //START TIMER 1mS
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x20>)
 80011d6:	f004 ff17 	bl	8006008 <HAL_TIM_Base_Start_IT>
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000244 	.word	0x20000244

080011e8 <WriteByte>:
///////////////////////////////////////////////////////////////////
// Split 16-bit register address into two bytes and write
// the address + data via I²C
///////////////////////////////////////////////////////////////////

void WriteByte(wchar_t reg_addr, char data2wr) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];

	data_write[0] = (reg_addr >> 8) & 0xFF; // MSB of register address
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	733b      	strb	r3, [r7, #12]
	data_write[1] = reg_addr & 0xFF;       // LSB of register address
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	737b      	strb	r3, [r7, #13]
	data_write[2] = data2wr & 0xFF;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, ADDR, data_write, 3, 1000);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2303      	movs	r3, #3
 8001212:	2152      	movs	r1, #82	; 0x52
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <WriteByte+0x3c>)
 8001216:	f002 f825 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000fc 	.word	0x200000fc

08001228 <ReadByte>:

///////////////////////////////////////////////////////////////////
// Split 16-bit register address into two bytes and write
// required register address to VL6180X and read the data back
///////////////////////////////////////////////////////////////////
char ReadByte(wchar_t reg) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (reg >> 8) & 0xFF; // MSB of register address
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	733b      	strb	r3, [r7, #12]
	data_write[1] = reg & 0xFF;       // LSB of register address
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, ADDR, data_write, 2, 1000);
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2302      	movs	r3, #2
 800124a:	2152      	movs	r1, #82	; 0x52
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <ReadByte+0x48>)
 800124e:	f002 f809 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADDR, data_read, 1, 1000);
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2152      	movs	r1, #82	; 0x52
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <ReadByte+0x48>)
 8001262:	f002 f8fd 	bl	8003460 <HAL_I2C_Master_Receive>
	return data_read[0];
 8001266:	7a3b      	ldrb	r3, [r7, #8]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200000fc 	.word	0x200000fc

08001274 <VL6180X_Init>:

///////////////////////////////////////////////////////////////////
//DESC.: load VL6180X settings
///////////////////////////////////////////////////////////////////

int VL6180X_Init() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET); //GPIO0 to logic ‘1’ allows the device to come out of reset.
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	4870      	ldr	r0, [pc, #448]	; (8001444 <VL6180X_Init+0x1d0>)
 8001282:	f001 fe7b 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_Delay(1);								//Necesita ese ms.
 8001286:	2001      	movs	r0, #1
 8001288:	f000 fe0c 	bl	8001ea4 <HAL_Delay>
	uint8_t reset;

	reset = ReadByte(0x0016);
 800128c:	2016      	movs	r0, #22
 800128e:	f7ff ffcb 	bl	8001228 <ReadByte>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	if(reset != 1){
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d012      	beq.n	80012c2 <VL6180X_Init+0x4e>
		WriteByte(0x0016, 0x01);
 800129c:	2101      	movs	r1, #1
 800129e:	2016      	movs	r0, #22
 80012a0:	f7ff ffa2 	bl	80011e8 <WriteByte>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	4866      	ldr	r0, [pc, #408]	; (8001444 <VL6180X_Init+0x1d0>)
 80012ac:	f001 fe66 	bl	8002f7c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80012b0:	2005      	movs	r0, #5
 80012b2:	f000 fdf7 	bl	8001ea4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012bc:	4861      	ldr	r0, [pc, #388]	; (8001444 <VL6180X_Init+0x1d0>)
 80012be:	f001 fe5d 	bl	8002f7c <HAL_GPIO_WritePin>
	}
	WriteByte(0x0207, 0x01);
 80012c2:	2101      	movs	r1, #1
 80012c4:	f240 2007 	movw	r0, #519	; 0x207
 80012c8:	f7ff ff8e 	bl	80011e8 <WriteByte>
	WriteByte(0x0208, 0x01);
 80012cc:	2101      	movs	r1, #1
 80012ce:	f44f 7002 	mov.w	r0, #520	; 0x208
 80012d2:	f7ff ff89 	bl	80011e8 <WriteByte>
	WriteByte(0x0133, 0x01);
 80012d6:	2101      	movs	r1, #1
 80012d8:	f240 1033 	movw	r0, #307	; 0x133
 80012dc:	f7ff ff84 	bl	80011e8 <WriteByte>
	WriteByte(0x0096, 0x00);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2096      	movs	r0, #150	; 0x96
 80012e4:	f7ff ff80 	bl	80011e8 <WriteByte>
	WriteByte(0x0097, 0xFD); // RANGE_SCALER = 253 FD
 80012e8:	21fd      	movs	r1, #253	; 0xfd
 80012ea:	2097      	movs	r0, #151	; 0x97
 80012ec:	f7ff ff7c 	bl	80011e8 <WriteByte>
	WriteByte(0x00e3, 0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	20e3      	movs	r0, #227	; 0xe3
 80012f4:	f7ff ff78 	bl	80011e8 <WriteByte>
	WriteByte(0x00e4, 0x04);
 80012f8:	2104      	movs	r1, #4
 80012fa:	20e4      	movs	r0, #228	; 0xe4
 80012fc:	f7ff ff74 	bl	80011e8 <WriteByte>
	WriteByte(0x00e5, 0x02);
 8001300:	2102      	movs	r1, #2
 8001302:	20e5      	movs	r0, #229	; 0xe5
 8001304:	f7ff ff70 	bl	80011e8 <WriteByte>
	WriteByte(0x00e6, 0x01);
 8001308:	2101      	movs	r1, #1
 800130a:	20e6      	movs	r0, #230	; 0xe6
 800130c:	f7ff ff6c 	bl	80011e8 <WriteByte>
	WriteByte(0x00e7, 0x03);
 8001310:	2103      	movs	r1, #3
 8001312:	20e7      	movs	r0, #231	; 0xe7
 8001314:	f7ff ff68 	bl	80011e8 <WriteByte>
	WriteByte(0x00f5, 0x02);
 8001318:	2102      	movs	r1, #2
 800131a:	20f5      	movs	r0, #245	; 0xf5
 800131c:	f7ff ff64 	bl	80011e8 <WriteByte>
	WriteByte(0x00D9, 0x05);
 8001320:	2105      	movs	r1, #5
 8001322:	20d9      	movs	r0, #217	; 0xd9
 8001324:	f7ff ff60 	bl	80011e8 <WriteByte>
	WriteByte(0x00DB, 0xCE);
 8001328:	21ce      	movs	r1, #206	; 0xce
 800132a:	20db      	movs	r0, #219	; 0xdb
 800132c:	f7ff ff5c 	bl	80011e8 <WriteByte>
	WriteByte(0x00DC, 0x03);
 8001330:	2103      	movs	r1, #3
 8001332:	20dc      	movs	r0, #220	; 0xdc
 8001334:	f7ff ff58 	bl	80011e8 <WriteByte>
	WriteByte(0x00DD, 0xF8);
 8001338:	21f8      	movs	r1, #248	; 0xf8
 800133a:	20dd      	movs	r0, #221	; 0xdd
 800133c:	f7ff ff54 	bl	80011e8 <WriteByte>
	WriteByte(0x009f, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	209f      	movs	r0, #159	; 0x9f
 8001344:	f7ff ff50 	bl	80011e8 <WriteByte>
	WriteByte(0x00a3, 0x3c);
 8001348:	213c      	movs	r1, #60	; 0x3c
 800134a:	20a3      	movs	r0, #163	; 0xa3
 800134c:	f7ff ff4c 	bl	80011e8 <WriteByte>
	WriteByte(0x00b7, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	20b7      	movs	r0, #183	; 0xb7
 8001354:	f7ff ff48 	bl	80011e8 <WriteByte>
	WriteByte(0x00bb, 0x3c);
 8001358:	213c      	movs	r1, #60	; 0x3c
 800135a:	20bb      	movs	r0, #187	; 0xbb
 800135c:	f7ff ff44 	bl	80011e8 <WriteByte>
	WriteByte(0x00b2, 0x09);
 8001360:	2109      	movs	r1, #9
 8001362:	20b2      	movs	r0, #178	; 0xb2
 8001364:	f7ff ff40 	bl	80011e8 <WriteByte>
	WriteByte(0x00ca, 0x09);
 8001368:	2109      	movs	r1, #9
 800136a:	20ca      	movs	r0, #202	; 0xca
 800136c:	f7ff ff3c 	bl	80011e8 <WriteByte>
	WriteByte(0x0198, 0x01);
 8001370:	2101      	movs	r1, #1
 8001372:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8001376:	f7ff ff37 	bl	80011e8 <WriteByte>
	WriteByte(0x01b0, 0x17);
 800137a:	2117      	movs	r1, #23
 800137c:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8001380:	f7ff ff32 	bl	80011e8 <WriteByte>
    WriteByte(0x01ad, 0x00);
 8001384:	2100      	movs	r1, #0
 8001386:	f240 10ad 	movw	r0, #429	; 0x1ad
 800138a:	f7ff ff2d 	bl	80011e8 <WriteByte>
	WriteByte(0x00FF, 0x05);
 800138e:	2105      	movs	r1, #5
 8001390:	20ff      	movs	r0, #255	; 0xff
 8001392:	f7ff ff29 	bl	80011e8 <WriteByte>
	WriteByte(0x0100, 0x05);
 8001396:	2105      	movs	r1, #5
 8001398:	f44f 7080 	mov.w	r0, #256	; 0x100
 800139c:	f7ff ff24 	bl	80011e8 <WriteByte>
	WriteByte(0x0199, 0x05);
 80013a0:	2105      	movs	r1, #5
 80013a2:	f240 1099 	movw	r0, #409	; 0x199
 80013a6:	f7ff ff1f 	bl	80011e8 <WriteByte>
	WriteByte(0x0109, 0x07);
 80013aa:	2107      	movs	r1, #7
 80013ac:	f240 1009 	movw	r0, #265	; 0x109
 80013b0:	f7ff ff1a 	bl	80011e8 <WriteByte>
	WriteByte(0x010a, 0x30);
 80013b4:	2130      	movs	r1, #48	; 0x30
 80013b6:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80013ba:	f7ff ff15 	bl	80011e8 <WriteByte>
	WriteByte(0x003f, 0x46);
 80013be:	2146      	movs	r1, #70	; 0x46
 80013c0:	203f      	movs	r0, #63	; 0x3f
 80013c2:	f7ff ff11 	bl	80011e8 <WriteByte>
	WriteByte(0x01a6, 0x1b);
 80013c6:	211b      	movs	r1, #27
 80013c8:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80013cc:	f7ff ff0c 	bl	80011e8 <WriteByte>
	WriteByte(0x01ac, 0x3e);
 80013d0:	213e      	movs	r1, #62	; 0x3e
 80013d2:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 80013d6:	f7ff ff07 	bl	80011e8 <WriteByte>
	WriteByte(0x01a7, 0x1f);
 80013da:	211f      	movs	r1, #31
 80013dc:	f240 10a7 	movw	r0, #423	; 0x1a7
 80013e0:	f7ff ff02 	bl	80011e8 <WriteByte>
	WriteByte(0x0103, 0x01);
 80013e4:	2101      	movs	r1, #1
 80013e6:	f240 1003 	movw	r0, #259	; 0x103
 80013ea:	f7ff fefd 	bl	80011e8 <WriteByte>
	WriteByte(0x0030, 0x00);
 80013ee:	2100      	movs	r1, #0
 80013f0:	2030      	movs	r0, #48	; 0x30
 80013f2:	f7ff fef9 	bl	80011e8 <WriteByte>
	WriteByte(0x001b, 0x0A);
 80013f6:	210a      	movs	r1, #10
 80013f8:	201b      	movs	r0, #27
 80013fa:	f7ff fef5 	bl	80011e8 <WriteByte>
	WriteByte(0x003e, 0x0A);
 80013fe:	210a      	movs	r1, #10
 8001400:	203e      	movs	r0, #62	; 0x3e
 8001402:	f7ff fef1 	bl	80011e8 <WriteByte>
	WriteByte(0x0131, 0x04);
 8001406:	2104      	movs	r1, #4
 8001408:	f240 1031 	movw	r0, #305	; 0x131
 800140c:	f7ff feec 	bl	80011e8 <WriteByte>
	WriteByte(0x0011, 0x10);
 8001410:	2110      	movs	r1, #16
 8001412:	2011      	movs	r0, #17
 8001414:	f7ff fee8 	bl	80011e8 <WriteByte>
	WriteByte(0x0014, 0x24);
 8001418:	2124      	movs	r1, #36	; 0x24
 800141a:	2014      	movs	r0, #20
 800141c:	f7ff fee4 	bl	80011e8 <WriteByte>
	WriteByte(0x0031, 0xFF);
 8001420:	21ff      	movs	r1, #255	; 0xff
 8001422:	2031      	movs	r0, #49	; 0x31
 8001424:	f7ff fee0 	bl	80011e8 <WriteByte>
	WriteByte(0x00d2, 0x01);
 8001428:	2101      	movs	r1, #1
 800142a:	20d2      	movs	r0, #210	; 0xd2
 800142c:	f7ff fedc 	bl	80011e8 <WriteByte>
	WriteByte(0x00f2, 0x01);
 8001430:	2101      	movs	r1, #1
 8001432:	20f2      	movs	r0, #242	; 0xf2
 8001434:	f7ff fed8 	bl	80011e8 <WriteByte>

	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010c00 	.word	0x40010c00

08001448 <VL6180X_Start_Range>:

///////////////////////////////////////////////////////////////////
// Start a range measurement in single shot mode
///////////////////////////////////////////////////////////////////
int VL6180X_Start_Range() {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	WriteByte(0x0018,0x01);
 800144c:	2101      	movs	r1, #1
 800144e:	2018      	movs	r0, #24
 8001450:	f7ff feca 	bl	80011e8 <WriteByte>
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}

0800145a <VL6180X_Poll_Range>:
///////////////////////////////////////////////////////////////////
// DESC.:poll for new sample ready ready
// When the measurement of VL6180X_Start_Range() is completed, bit 2
// of RESULT__INTERRUPT_STATUS_GPIO{0x4F} will be set.
///////////////////////////////////////////////////////////////////
int VL6180X_Poll_Range() {
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
	char status;
	char range_status;

	// check the status
	status = ReadByte(0x004f);
 8001460:	204f      	movs	r0, #79	; 0x4f
 8001462:	f7ff fee1 	bl	8001228 <ReadByte>
 8001466:	4603      	mov	r3, r0
 8001468:	71bb      	strb	r3, [r7, #6]
	range_status = status & 0x07;
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	71fb      	strb	r3, [r7, #7]

	// wait for new measurement ready status
	while (range_status != 0x04) {
 8001472:	e00b      	b.n	800148c <VL6180X_Poll_Range+0x32>
		status = ReadByte(0x004f);
 8001474:	204f      	movs	r0, #79	; 0x4f
 8001476:	f7ff fed7 	bl	8001228 <ReadByte>
 800147a:	4603      	mov	r3, r0
 800147c:	71bb      	strb	r3, [r7, #6]
		range_status = status & 0x07;
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f000 fd0c 	bl	8001ea4 <HAL_Delay>
	while (range_status != 0x04) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d1f0      	bne.n	8001474 <VL6180X_Poll_Range+0x1a>
	}
	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <VL6180X_Read_Range>:

///////////////////////////////////////////////////////////////////
// Read range result (mm)
///////////////////////////////////////////////////////////////////
int VL6180X_Read_Range() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	int range;
	range=ReadByte(0x0062);
 80014a2:	2062      	movs	r0, #98	; 0x62
 80014a4:	f7ff fec0 	bl	8001228 <ReadByte>
 80014a8:	4603      	mov	r3, r0
 80014aa:	607b      	str	r3, [r7, #4]
	return range;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <VL6180X_Clear_Interrupts>:

///////////////////////////////////////////////////////////////////
// clear interrupts
///////////////////////////////////////////////////////////////////
int VL6180X_Clear_Interrupts() {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
	 WriteByte(0x0015,0x07);
 80014ba:	2107      	movs	r1, #7
 80014bc:	2015      	movs	r0, #21
 80014be:	f7ff fe93 	bl	80011e8 <WriteByte>
	 return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <FSR_Check>:

///////////////////////////////////////////////////////////////////
//FSR check
//DESC.: Check the hands position
///////////////////////////////////////////////////////////////////
status_TypeDef FSR_Check(uint16_t FSR_VALUE){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	if(MIN_FSR_PRESS_OK < FSR_VALUE) return PASS_OK;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <FSR_Check+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <FSR_Check+0x1a>
	else return FAIL;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <buzzer>:

///////////////////////////////////////////////////////////////////
// Buzzer sound
// DESC.: 0,5s turn on PWM for tone, 0,5s turn off PWM
///////////////////////////////////////////////////////////////////
void buzzer(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if(timer_buzzer>0.001 && timer_buzzer<=250){ //durante 0,25s PWM BUZZER ON
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <buzzer+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd0f      	ble.n	8001518 <buzzer+0x2c>
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <buzzer+0x5c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2bfa      	cmp	r3, #250	; 0xfa
 80014fe:	dc0b      	bgt.n	8001518 <buzzer+0x2c>
		TIM2->ARR = 15-1;
 8001500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001504:	220e      	movs	r2, #14
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR1 = duty_sound;
 8001508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150c:	2207      	movs	r2, #7
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//START PWM FOR BUZZER SOUND
 8001510:	2100      	movs	r1, #0
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <buzzer+0x60>)
 8001514:	f004 fe22 	bl	800615c <HAL_TIM_PWM_Start>
	}
	if(timer_buzzer>=250 && timer_buzzer<=500){ //apago el timer despues de 250 ms y cumplo el periodo de 500ms para una maniobra
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <buzzer+0x5c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2bf9      	cmp	r3, #249	; 0xf9
 800151e:	dd08      	ble.n	8001532 <buzzer+0x46>
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <buzzer+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001528:	dc03      	bgt.n	8001532 <buzzer+0x46>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800152a:	2100      	movs	r1, #0
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <buzzer+0x60>)
 800152e:	f004 feb7 	bl	80062a0 <HAL_TIM_PWM_Stop>
	}
	if(timer_buzzer>=500){timer_buzzer=0;} //reinicio la cuenta del timer
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <buzzer+0x5c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800153a:	db02      	blt.n	8001542 <buzzer+0x56>
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <buzzer+0x5c>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001f0 	.word	0x200001f0
 800154c:	200001fc 	.word	0x200001fc

08001550 <VL6180x_offset>:

///////////////////////////////////////////////////////////////////
// func.:zero_distance
// DESC.: returns offset distance
///////////////////////////////////////////////////////////////////
int VL6180x_offset(){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	int offset_measure = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<15; i++){
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	e008      	b.n	8001572 <VL6180x_offset+0x22>
		offset_measure += VL6180X_Read_Range();
 8001560:	f7ff ff9c 	bl	800149c <VL6180X_Read_Range>
 8001564:	4602      	mov	r2, r0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<15; i++){
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b0e      	cmp	r3, #14
 8001576:	ddf3      	ble.n	8001560 <VL6180x_offset+0x10>
		//HAL_Delay(2);
	}
	return offset_measure = offset_measure/15; //promedio de lecturas para obtener el offset
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <VL6180x_offset+0x44>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	441a      	add	r2, r3
 8001582:	10d2      	asrs	r2, r2, #3
 8001584:	17db      	asrs	r3, r3, #31
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	88888889 	.word	0x88888889

08001598 <FSR_offset>:

///////////////////////////////////////////////////////////////////
// func.:FSR value
// DESC.: calculates FSR offset.
///////////////////////////////////////////////////////////////////
int FSR_offset(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	int offset = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
	// Start ADC Conversion FOR FSR
	HAL_ADC_Start(&hadc2);
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <FSR_offset+0x54>)
 80015a4:	f000 fd7a 	bl	800209c <HAL_ADC_Start>

	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, 1);
 80015a8:	2101      	movs	r1, #1
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <FSR_offset+0x54>)
 80015ac:	f000 fe24 	bl	80021f8 <HAL_ADC_PollForConversion>

	for(int j = 0; j < 15; j++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e009      	b.n	80015ca <FSR_offset+0x32>
		offset += HAL_ADC_GetValue(&hadc2);
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <FSR_offset+0x54>)
 80015b8:	f000 ff24 	bl	8002404 <HAL_ADC_GetValue>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
	for(int j = 0; j < 15; j++){
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b0e      	cmp	r3, #14
 80015ce:	ddf2      	ble.n	80015b6 <FSR_offset+0x1e>
	}
	return offset = offset / 15;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <FSR_offset+0x58>)
 80015d4:	fb82 1203 	smull	r1, r2, r2, r3
 80015d8:	441a      	add	r2, r3
 80015da:	10d2      	asrs	r2, r2, #3
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200000c4 	.word	0x200000c4
 80015f0:	88888889 	.word	0x88888889

080015f4 <calculate_frequency>:

///////////////////////////////////////////////////////////////////
// func.:calculate freq
// DESC.:Función para calcular frecuencia en ventana de 2 segundos
///////////////////////////////////////////////////////////////////
int calculate_frequency() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick(); // Tiempo actual en ms
 80015fa:	f000 fc49 	bl	8001e90 <HAL_GetTick>
 80015fe:	6078      	str	r0, [r7, #4]
    int recent_compressions = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 10; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	e00e      	b.n	8001628 <calculate_frequency+0x34>
        if ((current_time - last_compression_times[i]) <= 2000) {
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <calculate_frequency+0x4c>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800161a:	d802      	bhi.n	8001622 <calculate_frequency+0x2e>
            recent_compressions++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 10; i++) {
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b09      	cmp	r3, #9
 800162c:	dded      	ble.n	800160a <calculate_frequency+0x16>
        }
    }
    return recent_compressions / 2; // Frecuencia en Hz (cada 2 segundos)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0fda      	lsrs	r2, r3, #31
 8001632:	4413      	add	r3, r2
 8001634:	105b      	asrs	r3, r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200001bc 	.word	0x200001bc

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <MX_RTC_Init>:

//RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2100      	movs	r1, #0
 800165c:	460a      	mov	r2, r1
 800165e:	801a      	strh	r2, [r3, #0]
 8001660:	460a      	mov	r2, r1
 8001662:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_RTC_Init+0xc0>)
 8001672:	4a28      	ldr	r2, [pc, #160]	; (8001714 <MX_RTC_Init+0xc4>)
 8001674:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_RTC_Init+0xc0>)
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <MX_RTC_Init+0xc0>)
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <MX_RTC_Init+0xc0>)
 8001688:	f003 fa64 	bl	8004b54 <HAL_RTC_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001692:	f7ff ffd7 	bl	8001644 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001696:	2300      	movs	r3, #0
 8001698:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800169a:	2300      	movs	r3, #0
 800169c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2201      	movs	r2, #1
 80016a8:	4619      	mov	r1, r3
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <MX_RTC_Init+0xc0>)
 80016ac:	f003 fade 	bl	8004c6c <HAL_RTC_SetTime>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80016b6:	f7ff ffc5 	bl	8001644 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80016ba:	2302      	movs	r3, #2
 80016bc:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_OCTOBER;
 80016be:	2310      	movs	r3, #16
 80016c0:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x29;
 80016c2:	2329      	movs	r3, #41	; 0x29
 80016c4:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x24;
 80016c6:	2324      	movs	r3, #36	; 0x24
 80016c8:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	480f      	ldr	r0, [pc, #60]	; (8001710 <MX_RTC_Init+0xc0>)
 80016d4:	f003 fc3a 	bl	8004f4c <HAL_RTC_SetDate>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80016de:	f7ff ffb1 	bl	8001644 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2201      	movs	r2, #1
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_RTC_Init+0xc0>)
 80016fa:	f003 fcdd 	bl	80050b8 <HAL_RTC_SetAlarm>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001704:	f7ff ff9e 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000150 	.word	0x20000150
 8001714:	40002800 	.word	0x40002800

08001718 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_RTC_MspInit+0x3c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d110      	bne.n	800174c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800172a:	f002 fc8b 	bl	8004044 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_RTC_MspInit+0x40>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RTC_MspInit+0x40>)
 8001734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_RTC_MspInit+0x40>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_RTC_MspInit+0x44>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40002800 	.word	0x40002800
 8001758:	40021000 	.word	0x40021000
 800175c:	4242043c 	.word	0x4242043c

08001760 <MX_SPI1_Init>:

//SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_SPI1_Init+0x64>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MX_SPI1_Init+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI1_Init+0x64>)
 800176c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI1_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_SPI1_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI1_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI1_Init+0x64>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI1_Init+0x64>)
 8001794:	2208      	movs	r2, #8
 8001796:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI1_Init+0x64>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_SPI1_Init+0x64>)
 80017b2:	f003 ffbb 	bl	800572c <HAL_SPI_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017bc:	f7ff ff42 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000164 	.word	0x20000164
 80017c8:	40013000 	.word	0x40013000

080017cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_SPI_MspInit+0x88>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d12f      	bne.n	800184c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 80017f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_SPI_MspInit+0x8c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800181c:	23a0      	movs	r3, #160	; 0xa0
 800181e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_SPI_MspInit+0x90>)
 8001830:	f001 fa20 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_SPI_MspInit+0x90>)
 8001848:	f001 fa14 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013000 	.word	0x40013000
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_MspInit+0x5c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_MspInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_MspInit+0x5c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_MspInit+0x5c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_MspInit+0x60>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_MspInit+0x60>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <SysTick_Handler+0x34>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <SysTick_Handler+0x18>
			Timer1--;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <SysTick_Handler+0x34>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <SysTick_Handler+0x34>)
 800191e:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <SysTick_Handler+0x38>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <SysTick_Handler+0x2c>
			Timer2--;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Handler+0x38>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <SysTick_Handler+0x38>)
 8001932:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 fa9a 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000f4 	.word	0x200000f4
 8001940:	200000f6 	.word	0x200000f6

08001944 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001948:	2002      	movs	r0, #2
 800194a:	f001 fb2f 	bl	8002fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <ADC1_2_IRQHandler+0x14>)
 800195a:	f000 fd5f 	bl	800241c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <ADC1_2_IRQHandler+0x18>)
 8001960:	f000 fd5c 	bl	800241c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000094 	.word	0x20000094
 800196c:	200000c4 	.word	0x200000c4

08001970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  timer_1m++; //TIMER PARA CONTAR 1 MINUTO
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <TIM3_IRQHandler+0x2c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <TIM3_IRQHandler+0x2c>)
 800197c:	6013      	str	r3, [r2, #0]
  timer_buzzer++;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <TIM3_IRQHandler+0x30>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <TIM3_IRQHandler+0x30>)
 8001986:	6013      	str	r3, [r2, #0]
  timer_startsound++;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <TIM3_IRQHandler+0x34>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <TIM3_IRQHandler+0x34>)
 8001990:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <TIM3_IRQHandler+0x38>)
 8001994:	f004 fce8 	bl	8006368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001ec 	.word	0x200001ec
 80019a0:	200001f0 	.word	0x200001f0
 80019a4:	200001f4 	.word	0x200001f4
 80019a8:	20000244 	.word	0x20000244

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f005 fd54 	bl	8007488 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20005000 	.word	0x20005000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200001f8 	.word	0x200001f8
 8001a14:	20000438 	.word	0x20000438

08001a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a5e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15-1;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a6c:	220e      	movs	r2, #14
 8001a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7c:	4823      	ldr	r0, [pc, #140]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a7e:	f004 fa73 	bl	8005f68 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a88:	f7ff fddc 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	4619      	mov	r1, r3
 8001a98:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001a9a:	f004 fe2f 	bl	80066fc <HAL_TIM_ConfigClockSource>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001aa4:	f7ff fdce 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa8:	4818      	ldr	r0, [pc, #96]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001aaa:	f004 faff 	bl	80060ac <HAL_TIM_PWM_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ab4:	f7ff fdc6 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001ac8:	f005 f9b0 	bl	8006e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ad2:	f7ff fdb7 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad6:	2360      	movs	r3, #96	; 0x60
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001aee:	f004 fd43 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001af8:	f7ff fda4 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM2_Init+0xe8>)
 8001afe:	f000 f88d 	bl	8001c1c <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3738      	adds	r7, #56	; 0x38
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200001fc 	.word	0x200001fc

08001b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <MX_TIM3_Init+0x98>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72-1;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b42:	2247      	movs	r2, #71	; 0x47
 8001b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b52:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b54:	f004 fa08 	bl	8005f68 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b5e:	f7ff fd71 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b70:	f004 fdc4 	bl	80066fc <HAL_TIM_ConfigClockSource>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f7ff fd63 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM3_Init+0x94>)
 8001b8c:	f005 f94e 	bl	8006e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b96:	f7ff fd55 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000244 	.word	0x20000244
 8001ba8:	40000400 	.word	0x40000400

08001bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bd6:	e018      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_TIM_Base_MspInit+0x6c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d113      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	61d3      	str	r3, [r2, #28]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	201d      	movs	r0, #29
 8001c00:	f001 f801 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c04:	201d      	movs	r0, #29
 8001c06:	f001 f81a 	bl	8002c3e <HAL_NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40000400 	.word	0x40000400

08001c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d12a      	bne.n	8001c92 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_TIM_MspPostInit+0x80>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_TIM_MspPostInit+0x80>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_TIM_MspPostInit+0x80>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <HAL_TIM_MspPostInit+0x84>)
 8001c6a:	f001 f803 	bl	8002c74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_TIM_MspPostInit+0x88>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_TIM_MspPostInit+0x88>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <MX_USART1_UART_Init+0x50>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_USART1_UART_Init+0x4c>)
 8001ce0:	f005 f914 	bl	8006f0c <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cea:	f7ff fcab 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000028c 	.word	0x2000028c
 8001cf8:	40013800 	.word	0x40013800

08001cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d131      	bne.n	8001d80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <HAL_UART_MspInit+0x94>)
 8001d62:	f000 ff87 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_UART_MspInit+0x94>)
 8001d7c:	f000 ff7a 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010800 	.word	0x40010800

08001d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d94:	f7ff fe40 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d9a:	490c      	ldr	r1, [pc, #48]	; (8001dcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001db0:	4c09      	ldr	r4, [pc, #36]	; (8001dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f005 fb69 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc2:	f7ff f87b 	bl	8000ebc <main>
  bx lr
 8001dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001dd0:	08007ea0 	.word	0x08007ea0
  ldr r2, =_sbss
 8001dd4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001dd8:	20000434 	.word	0x20000434

08001ddc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <CAN1_RX1_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_Init+0x28>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x28>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 fefd 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f808 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fd30 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 ff15 	bl	8002c5a <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 fedd 	bl	8002c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000010 	.word	0x20000010
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	200002d4 	.word	0x200002d4

08001e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	200002d4 	.word	0x200002d4

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffe0 	bl	8001e90 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000010 	.word	0x20000010

08001eec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0be      	b.n	800208c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe f98a 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fc97 	bl	8002864 <ADC_ConversionStop_Disable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8099 	bne.w	800207a <HAL_ADC_Init+0x18e>
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 8095 	bne.w	800207a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7b1b      	ldrb	r3, [r3, #12]
 8001f72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_Init+0xa2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_ADC_Init+0xa8>
 8001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f92:	e000      	b.n	8001f96 <HAL_ADC_Init+0xaa>
 8001f94:	2300      	movs	r3, #0
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7d1b      	ldrb	r3, [r3, #20]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d119      	bne.n	8001fd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	035a      	lsls	r2, r3, #13
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_ADC_Init+0x1a8>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d003      	beq.n	8002012 <HAL_ADC_Init+0x126>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d104      	bne.n	800201c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	3b01      	subs	r3, #1
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	430a      	orrs	r2, r1
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_ADC_Init+0x1ac>)
 8002038:	4013      	ands	r3, r2
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d10b      	bne.n	8002058 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002056:	e018      	b.n	800208a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f023 0312 	bic.w	r3, r3, #18
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002078:	e007      	b.n	800208a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	ffe1f7fd 	.word	0xffe1f7fd
 8002098:	ff1f0efe 	.word	0xff1f0efe

0800209c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Start+0x1a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e098      	b.n	80021e8 <HAL_ADC_Start+0x14c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fb76 	bl	80027b0 <ADC_Enable>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8087 	bne.w	80021de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a41      	ldr	r2, [pc, #260]	; (80021f0 <HAL_ADC_Start+0x154>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d105      	bne.n	80020fa <HAL_ADC_Start+0x5e>
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_ADC_Start+0x158>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d026      	beq.n	8002162 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002124:	e01d      	b.n	8002162 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_ADC_Start+0x158>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_ADC_Start+0xaa>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_ADC_Start+0x154>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_Start+0xc6>
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_ADC_Start+0x158>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f023 0206 	bic.w	r2, r3, #6
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
 800217a:	e002      	b.n	8002182 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0202 	mvn.w	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800219e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021a2:	d113      	bne.n	80021cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_ADC_Start+0x154>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_ADC_Start+0x158>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	e00c      	b.n	80021e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40012800 	.word	0x40012800
 80021f4:	40012400 	.word	0x40012400

080021f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800220e:	f7ff fe3f 	bl	8001e90 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0d3      	b.n	80023e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d131      	bne.n	80022ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002252:	2b00      	cmp	r3, #0
 8002254:	d12a      	bne.n	80022ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002256:	e021      	b.n	800229c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d01d      	beq.n	800229c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_ADC_PollForConversion+0x7e>
 8002266:	f7ff fe13 	bl	8001e90 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d212      	bcs.n	800229c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0a2      	b.n	80023e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0d6      	beq.n	8002258 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022aa:	e070      	b.n	800238e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_ADC_PollForConversion+0x1f4>)
 80022ae:	681c      	ldr	r4, [r3, #0]
 80022b0:	2002      	movs	r0, #2
 80022b2:	f002 fb99 	bl	80049e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80022b6:	4603      	mov	r3, r0
 80022b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_ADC_PollForConversion+0x1f8>)
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_ADC_PollForConversion+0x104>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68d9      	ldr	r1, [r3, #12]
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_ADC_PollForConversion+0x1fc>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_ADC_PollForConversion+0x104>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_ADC_PollForConversion+0x200>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_ADC_PollForConversion+0x100>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_ADC_PollForConversion+0x204>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_PollForConversion+0x100>
 80022f4:	2314      	movs	r3, #20
 80022f6:	e020      	b.n	800233a <HAL_ADC_PollForConversion+0x142>
 80022f8:	2329      	movs	r3, #41	; 0x29
 80022fa:	e01e      	b.n	800233a <HAL_ADC_PollForConversion+0x142>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_ADC_PollForConversion+0x200>)
 8002304:	400b      	ands	r3, r1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_ADC_PollForConversion+0x120>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68d9      	ldr	r1, [r3, #12]
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_ADC_PollForConversion+0x204>)
 8002312:	400b      	ands	r3, r1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_ADC_PollForConversion+0x13c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6919      	ldr	r1, [r3, #16]
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_ADC_PollForConversion+0x208>)
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_ADC_PollForConversion+0x140>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_ADC_PollForConversion+0x208>)
 800232e:	400b      	ands	r3, r1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_PollForConversion+0x140>
 8002334:	2354      	movs	r3, #84	; 0x54
 8002336:	e000      	b.n	800233a <HAL_ADC_PollForConversion+0x142>
 8002338:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002340:	e021      	b.n	8002386 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d01a      	beq.n	8002380 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_ADC_PollForConversion+0x168>
 8002350:	f7ff fd9e 	bl	8001e90 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d20f      	bcs.n	8002380 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d90b      	bls.n	8002380 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e030      	b.n	80023e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	429a      	cmp	r2, r3
 800238c:	d8d9      	bhi.n	8002342 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0212 	mvn.w	r2, #18
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023b2:	d115      	bne.n	80023e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d111      	bne.n	80023e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	24924924 	.word	0x24924924
 80023f4:	00924924 	.word	0x00924924
 80023f8:	12492492 	.word	0x12492492
 80023fc:	00492492 	.word	0x00492492
 8002400:	00249249 	.word	0x00249249

08002404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03e      	beq.n	80024bc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d039      	beq.n	80024bc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800246a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800246e:	d11d      	bne.n	80024ac <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d119      	bne.n	80024ac <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0220 	bic.w	r2, r2, #32
 8002486:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f874 	bl	800259a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f06f 0212 	mvn.w	r2, #18
 80024ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d04d      	beq.n	8002562 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d048      	beq.n	8002562 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80024f2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80024f6:	d012      	beq.n	800251e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002502:	2b00      	cmp	r3, #0
 8002504:	d125      	bne.n	8002552 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002510:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002514:	d11d      	bne.n	8002552 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800252c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa76 	bl	8002a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 020c 	mvn.w	r2, #12
 8002560:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f812 	bl	80025ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0dc      	b.n	800279a <HAL_ADC_ConfigChannel+0x1da>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d81c      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b05      	subs	r3, #5
 800261c:	fa00 f203 	lsl.w	r2, r0, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
 8002628:	e03c      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d81c      	bhi.n	800266c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b23      	subs	r3, #35	; 0x23
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4019      	ands	r1, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	; 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b41      	subs	r3, #65	; 0x41
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d91c      	bls.n	80026e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4019      	ands	r1, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e019      	b.n	800271a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d003      	beq.n	800272a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002726:	2b11      	cmp	r3, #17
 8002728:	d132      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d125      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d126      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002750:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d11a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9a      	lsrs	r2, r3, #18
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1b2>
 800277e:	e007      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012400 	.word	0x40012400
 80027a8:	20000008 	.word	0x20000008
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d040      	beq.n	8002850 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <ADC_Enable+0xac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <ADC_Enable+0xb0>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ec:	e002      	b.n	80027f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027fa:	f7ff fb49 	bl	8001e90 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002800:	e01f      	b.n	8002842 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7ff fb45 	bl	8001e90 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d918      	bls.n	8002842 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d011      	beq.n	8002842 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1d8      	bne.n	8002802 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12e      	bne.n	80028dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800288e:	f7ff faff 	bl	8001e90 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002894:	e01b      	b.n	80028ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002896:	f7ff fafb 	bl	8001e90 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0dc      	beq.n	8002896 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADCEx_Calibration_Start+0x1e>
 8002902:	2302      	movs	r3, #2
 8002904:	e097      	b.n	8002a36 <HAL_ADCEx_Calibration_Start+0x14e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa8 	bl	8002864 <ADC_ConversionStop_Disable>
 8002914:	4603      	mov	r3, r0
 8002916:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff49 	bl	80027b0 <ADC_Enable>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f040 8081 	bne.w	8002a2c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002932:	f023 0302 	bic.w	r3, r3, #2
 8002936:	f043 0202 	orr.w	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <HAL_ADCEx_Calibration_Start+0x158>)
 8002940:	681c      	ldr	r4, [r3, #0]
 8002942:	2002      	movs	r0, #2
 8002944:	f002 f850 	bl	80049e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002948:	4603      	mov	r3, r0
 800294a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800294e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002950:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002952:	e002      	b.n	800295a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002970:	f7ff fa8e 	bl	8001e90 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002976:	e01b      	b.n	80029b0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002978:	f7ff fa8a 	bl	8001e90 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d914      	bls.n	80029b0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	f023 0312 	bic.w	r3, r3, #18
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e042      	b.n	8002a36 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1dc      	bne.n	8002978 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0204 	orr.w	r2, r2, #4
 80029cc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029ce:	f7ff fa5f 	bl	8001e90 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029d4:	e01b      	b.n	8002a0e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029d6:	f7ff fa5b 	bl	8001e90 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b0a      	cmp	r3, #10
 80029e2:	d914      	bls.n	8002a0e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	f023 0312 	bic.w	r3, r3, #18
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e013      	b.n	8002a36 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1dc      	bne.n	80029d6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f023 0303 	bic.w	r3, r3, #3
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000008 	.word	0x20000008

08002a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4906      	ldr	r1, [pc, #24]	; (8002af0 <__NVIC_EnableIRQ+0x34>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	; (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	; (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d301      	bcc.n	8002bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <SysTick_Config+0x40>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bca:	210f      	movs	r1, #15
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f7ff ff90 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SysTick_Config+0x40>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <SysTick_Config+0x40>)
 8002bdc:	2207      	movs	r2, #7
 8002bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff2d 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff42 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff90 	bl	8002b48 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5f 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff35 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffa2 	bl	8002bac <SysTick_Config>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b08b      	sub	sp, #44	; 0x2c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	e169      	b.n	8002f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f040 8158 	bne.w	8002f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a9a      	ldr	r2, [pc, #616]	; (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d05e      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cb0:	4a98      	ldr	r2, [pc, #608]	; (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d875      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cb6:	4a98      	ldr	r2, [pc, #608]	; (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d058      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cbc:	4a96      	ldr	r2, [pc, #600]	; (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d86f      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cc2:	4a96      	ldr	r2, [pc, #600]	; (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d052      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cc8:	4a94      	ldr	r2, [pc, #592]	; (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d869      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cce:	4a94      	ldr	r2, [pc, #592]	; (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04c      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cd4:	4a92      	ldr	r2, [pc, #584]	; (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d863      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cda:	4a92      	ldr	r2, [pc, #584]	; (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d046      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a90      	ldr	r2, [pc, #576]	; (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d85d      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002ce6:	2b12      	cmp	r3, #18
 8002ce8:	d82a      	bhi.n	8002d40 <HAL_GPIO_Init+0xcc>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d859      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <HAL_GPIO_Init+0x80>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d6f 	.word	0x08002d6f
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d5b 	.word	0x08002d5b
 8002d00:	08002d9d 	.word	0x08002d9d
 8002d04:	08002da3 	.word	0x08002da3
 8002d08:	08002da3 	.word	0x08002da3
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002da3 	.word	0x08002da3
 8002d14:	08002da3 	.word	0x08002da3
 8002d18:	08002da3 	.word	0x08002da3
 8002d1c:	08002da3 	.word	0x08002da3
 8002d20:	08002da3 	.word	0x08002da3
 8002d24:	08002da3 	.word	0x08002da3
 8002d28:	08002da3 	.word	0x08002da3
 8002d2c:	08002da3 	.word	0x08002da3
 8002d30:	08002da3 	.word	0x08002da3
 8002d34:	08002da3 	.word	0x08002da3
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <HAL_GPIO_Init+0x2b4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d46:	e02c      	b.n	8002da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e029      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	623b      	str	r3, [r7, #32]
          break;
 8002d58:	e024      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e01f      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e01a      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d76:	2304      	movs	r3, #4
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e013      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	611a      	str	r2, [r3, #16]
          break;
 8002d8e:	e009      	b.n	8002da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d90:	2308      	movs	r3, #8
 8002d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	615a      	str	r2, [r3, #20]
          break;
 8002d9a:	e003      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          break;
 8002da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d801      	bhi.n	8002dae <HAL_GPIO_Init+0x13a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_Init+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	d802      	bhi.n	8002dc0 <HAL_GPIO_Init+0x14c>
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x152>
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	3b08      	subs	r3, #8
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	210f      	movs	r1, #15
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80b1 	beq.w	8002f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e0c:	4a48      	ldr	r2, [pc, #288]	; (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a40      	ldr	r2, [pc, #256]	; (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_GPIO_Init+0x1ec>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3f      	ldr	r2, [pc, #252]	; (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00d      	beq.n	8002e5c <HAL_GPIO_Init+0x1e8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <HAL_GPIO_Init+0x2c8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <HAL_GPIO_Init+0x1e4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_GPIO_Init+0x1e0>
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e004      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e60:	2300      	movs	r3, #0
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	f002 0203 	and.w	r2, r2, #3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	4093      	lsls	r3, r2
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e72:	492f      	ldr	r1, [pc, #188]	; (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	492c      	ldr	r1, [pc, #176]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4928      	ldr	r1, [pc, #160]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4922      	ldr	r1, [pc, #136]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	491e      	ldr	r1, [pc, #120]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4918      	ldr	r1, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4914      	ldr	r1, [pc, #80]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d021      	beq.n	8002f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e021      	b.n	8002f56 <HAL_GPIO_Init+0x2e2>
 8002f12:	bf00      	nop
 8002f14:	10320000 	.word	0x10320000
 8002f18:	10310000 	.word	0x10310000
 8002f1c:	10220000 	.word	0x10220000
 8002f20:	10210000 	.word	0x10210000
 8002f24:	10120000 	.word	0x10120000
 8002f28:	10110000 	.word	0x10110000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40010800 	.word	0x40010800
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	4909      	ldr	r1, [pc, #36]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae8e 	bne.w	8002c88 <HAL_GPIO_Init+0x14>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	372c      	adds	r7, #44	; 0x2c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe f8fa 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e12b      	b.n	8003246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd ff0a 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003040:	f001 fbd6 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a81      	ldr	r2, [pc, #516]	; (8003250 <HAL_I2C_Init+0x274>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d807      	bhi.n	8003060 <HAL_I2C_Init+0x84>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_I2C_Init+0x278>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e006      	b.n	800306e <HAL_I2C_Init+0x92>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <HAL_I2C_Init+0x27c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0e7      	b.n	8003246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a78      	ldr	r2, [pc, #480]	; (800325c <HAL_I2C_Init+0x280>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_I2C_Init+0x274>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d802      	bhi.n	80030b0 <HAL_I2C_Init+0xd4>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	e009      	b.n	80030c4 <HAL_I2C_Init+0xe8>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	4a69      	ldr	r2, [pc, #420]	; (8003260 <HAL_I2C_Init+0x284>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	3301      	adds	r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	495c      	ldr	r1, [pc, #368]	; (8003250 <HAL_I2C_Init+0x274>)
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d819      	bhi.n	8003118 <HAL_I2C_Init+0x13c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e59      	subs	r1, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_I2C_Init+0x138>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e59      	subs	r1, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fbb1 f3f3 	udiv	r3, r1, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	e051      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003114:	2304      	movs	r3, #4
 8003116:	e04f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_I2C_Init+0x168>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e012      	b.n	800316a <HAL_I2C_Init+0x18e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x196>
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_I2C_Init+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e58      	subs	r0, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	fbb0 f3f3 	udiv	r3, r0, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	e00f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6809      	ldr	r1, [r1, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6911      	ldr	r1, [r2, #16]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	000186a0 	.word	0x000186a0
 8003254:	001e847f 	.word	0x001e847f
 8003258:	003d08ff 	.word	0x003d08ff
 800325c:	431bde83 	.word	0x431bde83
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	4613      	mov	r3, r2
 8003276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7fe fe0a 	bl	8001e90 <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 80e0 	bne.w	800344c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2319      	movs	r3, #25
 8003292:	2201      	movs	r2, #1
 8003294:	4970      	ldr	r1, [pc, #448]	; (8003458 <HAL_I2C_Master_Transmit+0x1f4>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fc9e 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0d3      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x50>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cc      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d007      	beq.n	80032da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	; 0x21
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a50      	ldr	r2, [pc, #320]	; (800345c <HAL_I2C_Master_Transmit+0x1f8>)
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb08 	bl	8003938 <I2C_MasterRequestWrite>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e08d      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003348:	e066      	b.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fd5c 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_I2C_Master_Transmit+0x188>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fd53 	bl	8003e9c <I2C_WaitOnBTFFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e01a      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d194      	bne.n	800334a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7fe fd0a 	bl	8001e90 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	f040 824b 	bne.w	8003922 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2319      	movs	r3, #25
 8003492:	2201      	movs	r2, #1
 8003494:	497f      	ldr	r1, [pc, #508]	; (8003694 <HAL_I2C_Master_Receive+0x234>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fb9e 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	e23e      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_I2C_Master_Receive+0x54>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e237      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d007      	beq.n	80034da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2222      	movs	r2, #34	; 0x22
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2210      	movs	r2, #16
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	893a      	ldrh	r2, [r7, #8]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a5f      	ldr	r2, [pc, #380]	; (8003698 <HAL_I2C_Master_Receive+0x238>)
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa8a 	bl	8003a3c <I2C_MasterRequestRead>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1f8      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e1cc      	b.n	80038fc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	2b01      	cmp	r3, #1
 8003568:	d11e      	bne.n	80035a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800357a:	b672      	cpsid	i
}
 800357c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a4:	b662      	cpsie	i
}
 80035a6:	e035      	b.n	8003614 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11e      	bne.n	80035ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035c0:	b672      	cpsid	i
}
 80035c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035ea:	b662      	cpsie	i
}
 80035ec:	e012      	b.n	8003614 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003614:	e172      	b.n	80038fc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b03      	cmp	r3, #3
 800361c:	f200 811f 	bhi.w	800385e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	2b01      	cmp	r3, #1
 8003626:	d123      	bne.n	8003670 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fc7d 	bl	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e173      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800366e:	e145      	b.n	80038fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b02      	cmp	r3, #2
 8003676:	d152      	bne.n	800371e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	2200      	movs	r2, #0
 8003680:	4906      	ldr	r1, [pc, #24]	; (800369c <HAL_I2C_Master_Receive+0x23c>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 faa8 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e148      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
 8003692:	bf00      	nop
 8003694:	00100002 	.word	0x00100002
 8003698:	ffff0000 	.word	0xffff0000
 800369c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036e6:	b662      	cpsie	i
}
 80036e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371c:	e0ee      	b.n	80038fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	4981      	ldr	r1, [pc, #516]	; (800392c <HAL_I2C_Master_Receive+0x4cc>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fa55 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f5      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003748:	b672      	cpsid	i
}
 800374a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_I2C_Master_Receive+0x4d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	08db      	lsrs	r3, r3, #3
 8003784:	4a6b      	ldr	r2, [pc, #428]	; (8003934 <HAL_I2C_Master_Receive+0x4d4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a1a      	lsrs	r2, r3, #8
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00da      	lsls	r2, r3, #3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	3b01      	subs	r3, #1
 800379c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d118      	bne.n	80037d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037c6:	b662      	cpsie	i
}
 80037c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0a6      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d1d9      	bne.n	8003798 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003826:	b662      	cpsie	i
}
 8003828:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385c:	e04e      	b.n	80038fc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fb62 	bl	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e058      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d124      	bne.n	80038fc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f ae88 	bne.w	8003616 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	00010004 	.word	0x00010004
 8003930:	20000008 	.word	0x20000008
 8003934:	14f8b589 	.word	0x14f8b589

08003938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	460b      	mov	r3, r1
 8003946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d006      	beq.n	8003962 <I2C_MasterRequestWrite+0x2a>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d003      	beq.n	8003962 <I2C_MasterRequestWrite+0x2a>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003960:	d108      	bne.n	8003974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e00b      	b.n	800398c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b12      	cmp	r3, #18
 800397a:	d107      	bne.n	800398c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f91d 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b2:	d103      	bne.n	80039bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e035      	b.n	8003a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c8:	d108      	bne.n	80039dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	e01b      	b.n	8003a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039dc:	897b      	ldrh	r3, [r7, #10]
 80039de:	11db      	asrs	r3, r3, #7
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0306 	and.w	r3, r3, #6
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f063 030f 	orn	r3, r3, #15
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <I2C_MasterRequestWrite+0xfc>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f966 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e010      	b.n	8003a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <I2C_MasterRequestWrite+0x100>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f956 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	00010008 	.word	0x00010008
 8003a38:	00010002 	.word	0x00010002

08003a3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d006      	beq.n	8003a76 <I2C_MasterRequestRead+0x3a>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d003      	beq.n	8003a76 <I2C_MasterRequestRead+0x3a>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a74:	d108      	bne.n	8003a88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e00b      	b.n	8003aa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b11      	cmp	r3, #17
 8003a8e:	d107      	bne.n	8003aa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f893 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac6:	d103      	bne.n	8003ad0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e079      	b.n	8003bc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003adc:	d108      	bne.n	8003af0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e05f      	b.n	8003bb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003af0:	897b      	ldrh	r3, [r7, #10]
 8003af2:	11db      	asrs	r3, r3, #7
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0306 	and.w	r3, r3, #6
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f063 030f 	orn	r3, r3, #15
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4930      	ldr	r1, [pc, #192]	; (8003bd0 <I2C_MasterRequestRead+0x194>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8dc 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e054      	b.n	8003bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4929      	ldr	r1, [pc, #164]	; (8003bd4 <I2C_MasterRequestRead+0x198>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f8cc 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e044      	b.n	8003bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f831 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d103      	bne.n	8003b94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e017      	b.n	8003bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b98:	897b      	ldrh	r3, [r7, #10]
 8003b9a:	11db      	asrs	r3, r3, #7
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 0306 	and.w	r3, r3, #6
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f063 030e 	orn	r3, r3, #14
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <I2C_MasterRequestRead+0x198>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f888 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00010008 	.word	0x00010008
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be8:	e048      	b.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d044      	beq.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe f94d 	bl	8001e90 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d139      	bne.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	e00c      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d116      	bne.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e023      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	e00c      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d093      	beq.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cda:	e071      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d123      	bne.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e067      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d041      	beq.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fe f8a8 	bl	8001e90 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d136      	bne.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10c      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	e00b      	b.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e021      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10c      	bne.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e00b      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f af6d 	bne.w	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8e3 	bl	8003fe6 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe f82d 	bl	8001e90 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d1c3      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f89b 	bl	8003fe6 <I2C_IsAcknowledgeFailed>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e034      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d028      	beq.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fd ffe5 	bl	8001e90 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11d      	bne.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d016      	beq.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e007      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d1c3      	bne.n	8003eaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f38:	e049      	b.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d119      	bne.n	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e030      	b.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7fd ff88 	bl	8001e90 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11d      	bne.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d016      	beq.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e007      	b.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d1ae      	bne.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d11b      	bne.n	8004036 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004006:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
	...

08004044 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_PWR_EnableBkUpAccess+0x14>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	420e0020 	.word	0x420e0020

0800405c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e272      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8087 	beq.w	800418a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800407c:	4b92      	ldr	r3, [pc, #584]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b04      	cmp	r3, #4
 8004086:	d00c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004088:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d112      	bne.n	80040ba <HAL_RCC_OscConfig+0x5e>
 8004094:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d10b      	bne.n	80040ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a2:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d06c      	beq.n	8004188 <HAL_RCC_OscConfig+0x12c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d168      	bne.n	8004188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e24c      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x76>
 80040c4:	4b80      	ldr	r3, [pc, #512]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a7f      	ldr	r2, [pc, #508]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e02e      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0xbc>
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 8004118:	4b6b      	ldr	r3, [pc, #428]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b68      	ldr	r3, [pc, #416]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a67      	ldr	r2, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd feaa 	bl	8001e90 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd fea6 	bl	8001e90 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e200      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xe4>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fd fe96 	bl	8001e90 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd fe92 	bl	8001e90 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1ec      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x10c>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004196:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041a2:	4b49      	ldr	r3, [pc, #292]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x18c>
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x176>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c0      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4939      	ldr	r1, [pc, #228]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fd fe4b 	bl	8001e90 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd fe47 	bl	8001e90 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a1      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4927      	ldr	r1, [pc, #156]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fe2a 	bl	8001e90 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004240:	f7fd fe26 	bl	8001e90 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e180      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03a      	beq.n	80042e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d019      	beq.n	80042a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCC_OscConfig+0x274>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fd fe0a 	bl	8001e90 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fd fe06 	bl	8001e90 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e160      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800429e:	2001      	movs	r0, #1
 80042a0:	f000 face 	bl	8004840 <RCC_Delay>
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_OscConfig+0x274>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fd fdf0 	bl	8001e90 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd fdec 	bl	8001e90 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d908      	bls.n	80042d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e146      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	42420000 	.word	0x42420000
 80042d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	4b92      	ldr	r3, [pc, #584]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e9      	bne.n	80042b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a6 	beq.w	800443a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b8b      	ldr	r3, [pc, #556]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4a87      	ldr	r2, [pc, #540]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	61d3      	str	r3, [r2, #28]
 800430a:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b82      	ldr	r3, [pc, #520]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7e      	ldr	r2, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fd fdad 	bl	8001e90 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fd fda9 	bl	8001e90 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e103      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b75      	ldr	r3, [pc, #468]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x312>
 8004360:	4b6f      	ldr	r3, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6213      	str	r3, [r2, #32]
 800436c:	e02d      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x334>
 8004376:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4a66      	ldr	r2, [pc, #408]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	6213      	str	r3, [r2, #32]
 800438e:	e01c      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x356>
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a60      	ldr	r2, [pc, #384]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6213      	str	r3, [r2, #32]
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6213      	str	r3, [r2, #32]
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fd fd5d 	bl	8001e90 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fd fd59 	bl	8001e90 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0b1      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ee      	beq.n	80043da <HAL_RCC_OscConfig+0x37e>
 80043fc:	e014      	b.n	8004428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd fd47 	bl	8001e90 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd fd43 	bl	8001e90 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e09b      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8087 	beq.w	8004552 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d061      	beq.n	8004514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d146      	bne.n	80044e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd fd17 	bl	8001e90 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fd13 	bl	8001e90 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e06d      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448c:	d108      	bne.n	80044a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4921      	ldr	r1, [pc, #132]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a19      	ldr	r1, [r3, #32]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	430b      	orrs	r3, r1
 80044b2:	491b      	ldr	r1, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fd fce7 	bl	8001e90 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd fce3 	bl	8001e90 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03d      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x46a>
 80044e4:	e035      	b.n	8004552 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd fcd0 	bl	8001e90 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fccc 	bl	8001e90 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e026      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x498>
 8004512:	e01e      	b.n	8004552 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e019      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
 8004528:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_OscConfig+0x500>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	429a      	cmp	r2, r3
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0d0      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d910      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	4965      	ldr	r1, [pc, #404]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d040      	beq.n	8004680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e073      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06b      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4936      	ldr	r1, [pc, #216]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd fc1e 	bl	8001e90 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fd fc1a 	bl	8001e90 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e053      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d210      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 0207 	bic.w	r2, r3, #7
 8004696:	4922      	ldr	r1, [pc, #136]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1cc>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1d0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fb7c 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40022000 	.word	0x40022000
 8004724:	40021000 	.word	0x40021000
 8004728:	08007e24 	.word	0x08007e24
 800472c:	20000008 	.word	0x20000008
 8004730:	2000000c 	.word	0x2000000c

08004734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b04      	cmp	r3, #4
 800475c:	d002      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x30>
 800475e:	2b08      	cmp	r3, #8
 8004760:	d003      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x36>
 8004762:	e027      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004766:	613b      	str	r3, [r7, #16]
      break;
 8004768:	e027      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	4a17      	ldr	r2, [pc, #92]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004774:	5cd3      	ldrb	r3, [r2, r3]
 8004776:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	0c5b      	lsrs	r3, r3, #17
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004796:	fb03 f202 	mul.w	r2, r3, r2
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e004      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	613b      	str	r3, [r7, #16]
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x98>)
 80047b6:	613b      	str	r3, [r7, #16]
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	693b      	ldr	r3, [r7, #16]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	007a1200 	.word	0x007a1200
 80047d0:	08007e3c 	.word	0x08007e3c
 80047d4:	08007e4c 	.word	0x08007e4c
 80047d8:	003d0900 	.word	0x003d0900

080047dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b02      	ldr	r3, [pc, #8]	; (80047ec <HAL_RCC_GetHCLKFreq+0x10>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	20000008 	.word	0x20000008

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff2 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	08007e34 	.word	0x08007e34

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffde 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	0adb      	lsrs	r3, r3, #11
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08007e34 	.word	0x08007e34

08004840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <RCC_Delay+0x34>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <RCC_Delay+0x38>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0a5b      	lsrs	r3, r3, #9
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800485c:	bf00      	nop
  }
  while (Delay --);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e5a      	subs	r2, r3, #1
 8004862:	60fa      	str	r2, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f9      	bne.n	800485c <RCC_Delay+0x1c>
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	20000008 	.word	0x20000008
 8004878:	10624dd3 	.word	0x10624dd3

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d07d      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004898:	2300      	movs	r3, #0
 800489a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10d      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a8:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	61d3      	str	r3, [r2, #28]
 80048b4:	4b49      	ldr	r3, [pc, #292]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d118      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d0:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a42      	ldr	r2, [pc, #264]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048dc:	f7fd fad8 	bl	8001e90 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	e008      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7fd fad4 	bl	8001e90 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e06d      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02e      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d027      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800492a:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fd faa3 	bl	8001e90 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	e00a      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fd fa9f 	bl	8001e90 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	; 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d901      	bls.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e036      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ee      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4917      	ldr	r1, [pc, #92]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	4313      	orrs	r3, r2
 8004980:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	490b      	ldr	r1, [pc, #44]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4904      	ldr	r1, [pc, #16]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	42420440 	.word	0x42420440

080049e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	f200 808a 	bhi.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d045      	beq.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a1e:	e082      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a20:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a26:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d07b      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0c9b      	lsrs	r3, r3, #18
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	4a41      	ldr	r2, [pc, #260]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a3c:	5cd3      	ldrb	r3, [r2, r3]
 8004a3e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d015      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a4a:	4b3c      	ldr	r3, [pc, #240]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	0c5b      	lsrs	r3, r3, #17
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a64:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e004      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4a34      	ldr	r2, [pc, #208]	; (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	61bb      	str	r3, [r7, #24]
      break;
 8004a92:	e04a      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4a2d      	ldr	r2, [pc, #180]	; (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	61bb      	str	r3, [r7, #24]
      break;
 8004aa2:	e042      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e01f      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d109      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ae0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af2:	d11c      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004af4:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004b00:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b04:	61bb      	str	r3, [r7, #24]
      break;
 8004b06:	e012      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b08:	e011      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b0a:	f7ff fe85 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0b9b      	lsrs	r3, r3, #14
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]
      break;
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b2e:	bf00      	nop
    }
  }
  return (frequency);
 8004b30:	69bb      	ldr	r3, [r7, #24]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08007e50 	.word	0x08007e50
 8004b44:	08007e60 	.word	0x08007e60
 8004b48:	007a1200 	.word	0x007a1200
 8004b4c:	003d0900 	.word	0x003d0900
 8004b50:	aaaaaaab 	.word	0xaaaaaaab

08004b54 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e07a      	b.n	8004c60 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7c5b      	ldrb	r3, [r3, #17]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fdcc 	bl	8001718 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fb2f 	bl	80051ea <HAL_RTC_WaitForSynchro>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e061      	b.n	8004c60 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fbe8 	bl	8005372 <RTC_EnterInitMode>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2204      	movs	r2, #4
 8004bac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e056      	b.n	8004c60 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0207 	bic.w	r2, r2, #7
 8004bc0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004bca:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RTC_Init+0x114>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <HAL_RTC_Init+0x114>)
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RTC_Init+0x114>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4921      	ldr	r1, [pc, #132]	; (8004c68 <HAL_RTC_Init+0x114>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d003      	beq.n	8004bfa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e00e      	b.n	8004c18 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f7ff fef4 	bl	80049e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c00:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e026      	b.n	8004c60 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	0c1a      	lsrs	r2, r3, #16
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f002 020f 	and.w	r2, r2, #15
 8004c24:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fbc6 	bl	80053c2 <RTC_ExitInitMode>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00c      	b.n	8004c60 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40006c00 	.word	0x40006c00

08004c6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_RTC_SetTime+0x20>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e080      	b.n	8004d92 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7c1b      	ldrb	r3, [r3, #16]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_RTC_SetTime+0x30>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e07a      	b.n	8004d92 <HAL_RTC_SetTime+0x126>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d113      	bne.n	8004cd6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004cb8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cca:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cd0:	4413      	add	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e01e      	b.n	8004d14 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fbb6 	bl	800544c <RTC_Bcd2ToByte>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004ce8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fbab 	bl	800544c <RTC_Bcd2ToByte>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004d02:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fb9f 	bl	800544c <RTC_Bcd2ToByte>
 8004d0e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004d10:	4423      	add	r3, r4
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004d14:	6979      	ldr	r1, [r7, #20]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fac4 	bl	80052a4 <RTC_WriteTimeCounter>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2204      	movs	r2, #4
 8004d26:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e02f      	b.n	8004d92 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0205 	bic.w	r2, r2, #5
 8004d40:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fad5 	bl	80052f2 <RTC_ReadAlarmCounter>
 8004d48:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d018      	beq.n	8004d84 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d214      	bcs.n	8004d84 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004d60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d64:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fadb 	bl	8005324 <RTC_WriteAlarmCounter>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2204      	movs	r2, #4
 8004d78:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e006      	b.n	8004d92 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd90      	pop	{r4, r7, pc}
	...

08004d9c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RTC_GetTime+0x28>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b5      	b.n	8004f34 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0ac      	b.n	8004f34 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fa32 	bl	8005244 <RTC_ReadTimeCounter>
 8004de0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4a55      	ldr	r2, [pc, #340]	; (8004f3c <HAL_RTC_GetTime+0x1a0>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	0adb      	lsrs	r3, r3, #11
 8004dec:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4b52      	ldr	r3, [pc, #328]	; (8004f3c <HAL_RTC_GetTime+0x1a0>)
 8004df2:	fba3 1302 	umull	r1, r3, r3, r2
 8004df6:	0adb      	lsrs	r3, r3, #11
 8004df8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a4f      	ldr	r2, [pc, #316]	; (8004f40 <HAL_RTC_GetTime+0x1a4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4a4a      	ldr	r2, [pc, #296]	; (8004f3c <HAL_RTC_GetTime+0x1a0>)
 8004e14:	fba2 1203 	umull	r1, r2, r2, r3
 8004e18:	0ad2      	lsrs	r2, r2, #11
 8004e1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004e1e:	fb01 f202 	mul.w	r2, r1, r2
 8004e22:	1a9a      	subs	r2, r3, r2
 8004e24:	4b46      	ldr	r3, [pc, #280]	; (8004f40 <HAL_RTC_GetTime+0x1a4>)
 8004e26:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2a:	0959      	lsrs	r1, r3, #5
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a5b      	subs	r3, r3, r1
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	1ad1      	subs	r1, r2, r3
 8004e36:	b2ca      	uxtb	r2, r1
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b17      	cmp	r3, #23
 8004e40:	d955      	bls.n	8004eee <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_RTC_GetTime+0x1a8>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	4b3c      	ldr	r3, [pc, #240]	; (8004f44 <HAL_RTC_GetTime+0x1a8>)
 8004e52:	fba3 2301 	umull	r2, r3, r3, r1
 8004e56:	091a      	lsrs	r2, r3, #4
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	1aca      	subs	r2, r1, r3
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fa42 	bl	80052f2 <RTC_ReadAlarmCounter>
 8004e6e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d008      	beq.n	8004e8a <HAL_RTC_GetTime+0xee>
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d904      	bls.n	8004e8a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	e002      	b.n	8004e90 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <HAL_RTC_GetTime+0x1ac>)
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f9ff 	bl	80052a4 <RTC_WriteTimeCounter>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e041      	b.n	8004f34 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa2e 	bl	8005324 <RTC_WriteAlarmCounter>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e030      	b.n	8004f34 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fa25 	bl	8005324 <RTC_WriteAlarmCounter>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e027      	b.n	8004f34 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 facd 	bl	8005486 <RTC_DateUpdate>
 8004eec:	e003      	b.n	8004ef6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa86 	bl	8005412 <RTC_ByteToBcd2>
 8004f06:	4603      	mov	r3, r0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fa7d 	bl	8005412 <RTC_ByteToBcd2>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	789b      	ldrb	r3, [r3, #2]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa74 	bl	8005412 <RTC_ByteToBcd2>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	91a2b3c5 	.word	0x91a2b3c5
 8004f40:	88888889 	.word	0x88888889
 8004f44:	aaaaaaab 	.word	0xaaaaaaab
 8004f48:	00015180 	.word	0x00015180

08004f4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_RTC_SetDate+0x24>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e097      	b.n	80050a4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	7c1b      	ldrb	r3, [r3, #16]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_RTC_SetDate+0x34>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e091      	b.n	80050a4 <HAL_RTC_SetDate+0x158>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	78da      	ldrb	r2, [r3, #3]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	785a      	ldrb	r2, [r3, #1]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	789a      	ldrb	r2, [r3, #2]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	739a      	strb	r2, [r3, #14]
 8004faa:	e01a      	b.n	8004fe2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa4b 	bl	800544c <RTC_Bcd2ToByte>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa42 	bl	800544c <RTC_Bcd2ToByte>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	789b      	ldrb	r3, [r3, #2]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fa39 	bl	800544c <RTC_Bcd2ToByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	7bdb      	ldrb	r3, [r3, #15]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	7b59      	ldrb	r1, [r3, #13]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	7b9b      	ldrb	r3, [r3, #14]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f000 fb23 	bl	800563c <RTC_WeekDayNum>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	7b1a      	ldrb	r2, [r3, #12]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f91c 	bl	8005244 <RTC_ReadTimeCounter>
 800500c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <HAL_RTC_SetDate+0x160>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0adb      	lsrs	r3, r3, #11
 8005018:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b18      	cmp	r3, #24
 800501e:	d93a      	bls.n	8005096 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <HAL_RTC_SetDate+0x164>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_RTC_SetDate+0x168>)
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005036:	69f9      	ldr	r1, [r7, #28]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f933 	bl	80052a4 <RTC_WriteTimeCounter>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2204      	movs	r2, #4
 8005048:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e027      	b.n	80050a4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f94c 	bl	80052f2 <RTC_ReadAlarmCounter>
 800505a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d018      	beq.n	8005096 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	429a      	cmp	r2, r3
 800506a:	d214      	bcs.n	8005096 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005072:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005076:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005078:	69b9      	ldr	r1, [r7, #24]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f952 	bl	8005324 <RTC_WriteAlarmCounter>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2204      	movs	r2, #4
 800508a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e006      	b.n	80050a4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	91a2b3c5 	.word	0x91a2b3c5
 80050b0:	aaaaaaab 	.word	0xaaaaaaab
 80050b4:	00015180 	.word	0x00015180

080050b8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	2100      	movs	r1, #0
 80050ce:	460a      	mov	r2, r1
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	460a      	mov	r2, r1
 80050d4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_RTC_SetAlarm+0x2a>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e07d      	b.n	80051e2 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	7c1b      	ldrb	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_RTC_SetAlarm+0x3a>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e077      	b.n	80051e2 <HAL_RTC_SetAlarm+0x12a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2202      	movs	r2, #2
 80050fc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80050fe:	f107 0314 	add.w	r3, r7, #20
 8005102:	2200      	movs	r2, #0
 8005104:	4619      	mov	r1, r3
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fe48 	bl	8004d9c <HAL_RTC_GetTime>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e065      	b.n	80051e2 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005116:	7d3b      	ldrb	r3, [r7, #20]
 8005118:	461a      	mov	r2, r3
 800511a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800511e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005122:	7d7b      	ldrb	r3, [r7, #21]
 8005124:	4619      	mov	r1, r3
 8005126:	460b      	mov	r3, r1
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800512e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005130:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005132:	4413      	add	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d113      	bne.n	8005164 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005146:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	4619      	mov	r1, r3
 8005150:	460b      	mov	r3, r1
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a5b      	subs	r3, r3, r1
 8005156:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005158:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800515e:	4413      	add	r3, r2
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e01e      	b.n	80051a2 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f96f 	bl	800544c <RTC_Bcd2ToByte>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005176:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f964 	bl	800544c <RTC_Bcd2ToByte>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005190:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	789b      	ldrb	r3, [r3, #2]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f958 	bl	800544c <RTC_Bcd2ToByte>
 800519c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800519e:	4423      	add	r3, r4
 80051a0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d205      	bcs.n	80051b6 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80051b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051b4:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80051b6:	69f9      	ldr	r1, [r7, #28]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f8b3 	bl	8005324 <RTC_WriteAlarmCounter>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2204      	movs	r2, #4
 80051c8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e006      	b.n	80051e2 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd90      	pop	{r4, r7, pc}

080051ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e01d      	b.n	800523c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0208 	bic.w	r2, r2, #8
 800520e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005210:	f7fc fe3e 	bl	8001e90 <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005216:	e009      	b.n	800522c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005218:	f7fc fe3a 	bl	8001e90 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005226:	d901      	bls.n	800522c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e007      	b.n	800523c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0ee      	beq.n	8005218 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	827b      	strh	r3, [r7, #18]
 8005250:	2300      	movs	r3, #0
 8005252:	823b      	strh	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005274:	8a7a      	ldrh	r2, [r7, #18]
 8005276:	8a3b      	ldrh	r3, [r7, #16]
 8005278:	429a      	cmp	r2, r3
 800527a:	d008      	beq.n	800528e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800527c:	8a3b      	ldrh	r3, [r7, #16]
 800527e:	041a      	lsls	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	b29b      	uxth	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e004      	b.n	8005298 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800528e:	8a7b      	ldrh	r3, [r7, #18]
 8005290:	041a      	lsls	r2, r3, #16
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005298:	697b      	ldr	r3, [r7, #20]
}
 800529a:	4618      	mov	r0, r3
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f85d 	bl	8005372 <RTC_EnterInitMode>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
 80052c2:	e011      	b.n	80052e8 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	0c12      	lsrs	r2, r2, #16
 80052cc:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	b292      	uxth	r2, r2
 80052d6:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f872 	bl	80053c2 <RTC_ExitInitMode>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	81fb      	strh	r3, [r7, #14]
 80052fe:	2300      	movs	r3, #0
 8005300:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	041a      	lsls	r2, r3, #16
 8005316:	89bb      	ldrh	r3, [r7, #12]
 8005318:	4313      	orrs	r3, r2
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f81d 	bl	8005372 <RTC_EnterInitMode>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	e011      	b.n	8005368 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	0c12      	lsrs	r2, r2, #16
 800534c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	b292      	uxth	r2, r2
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f832 	bl	80053c2 <RTC_ExitInitMode>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800537e:	f7fc fd87 	bl	8001e90 <HAL_GetTick>
 8005382:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005384:	e009      	b.n	800539a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005386:	f7fc fd83 	bl	8001e90 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005394:	d901      	bls.n	800539a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e00f      	b.n	80053ba <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ee      	beq.n	8005386 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0210 	orr.w	r2, r2, #16
 80053b6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0210 	bic.w	r2, r2, #16
 80053dc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80053de:	f7fc fd57 	bl	8001e90 <HAL_GetTick>
 80053e2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053e4:	e009      	b.n	80053fa <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80053e6:	f7fc fd53 	bl	8001e90 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f4:	d901      	bls.n	80053fa <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e007      	b.n	800540a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ee      	beq.n	80053e6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	4603      	mov	r3, r0
 800541a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005420:	e005      	b.n	800542e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	3b0a      	subs	r3, #10
 800542c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	2b09      	cmp	r3, #9
 8005432:	d8f6      	bhi.n	8005422 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	b2da      	uxtb	r2, r3
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4313      	orrs	r3, r2
 8005440:	b2db      	uxtb	r3, r3
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	b2db      	uxtb	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4413      	add	r3, r2
 800547a:	b2db      	uxtb	r3, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7bdb      	ldrb	r3, [r3, #15]
 80054a4:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7b5b      	ldrb	r3, [r3, #13]
 80054aa:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	7b9b      	ldrb	r3, [r3, #14]
 80054b0:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	e06f      	b.n	8005598 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d011      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d00e      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d00b      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d008      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d005      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b0a      	cmp	r3, #10
 80054da:	d002      	beq.n	80054e2 <RTC_DateUpdate+0x5c>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d117      	bne.n	8005512 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b1e      	cmp	r3, #30
 80054e6:	d803      	bhi.n	80054f0 <RTC_DateUpdate+0x6a>
      {
        day++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80054ee:	e050      	b.n	8005592 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d005      	beq.n	8005502 <RTC_DateUpdate+0x7c>
        {
          month++;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
          day = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005500:	e047      	b.n	8005592 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005502:	2301      	movs	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005506:	2301      	movs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
          year++;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	3301      	adds	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005510:	e03f      	b.n	8005592 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d008      	beq.n	800552a <RTC_DateUpdate+0xa4>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b06      	cmp	r3, #6
 800551c:	d005      	beq.n	800552a <RTC_DateUpdate+0xa4>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b09      	cmp	r3, #9
 8005522:	d002      	beq.n	800552a <RTC_DateUpdate+0xa4>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0b      	cmp	r3, #11
 8005528:	d10c      	bne.n	8005544 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b1d      	cmp	r3, #29
 800552e:	d803      	bhi.n	8005538 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005536:	e02c      	b.n	8005592 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3301      	adds	r3, #1
 800553c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800553e:	2301      	movs	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005542:	e026      	b.n	8005592 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d123      	bne.n	8005592 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b1b      	cmp	r3, #27
 800554e:	d803      	bhi.n	8005558 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e01c      	b.n	8005592 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b1c      	cmp	r3, #28
 800555c:	d111      	bne.n	8005582 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	b29b      	uxth	r3, r3
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f838 	bl	80055d8 <RTC_IsLeapYear>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <RTC_DateUpdate+0xf0>
        {
          day++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e00d      	b.n	8005592 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3301      	adds	r3, #1
 800557a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800557c:	2301      	movs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e007      	b.n	8005592 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b1d      	cmp	r3, #29
 8005586:	d104      	bne.n	8005592 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3301      	adds	r3, #1
 800558c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800558e:	2301      	movs	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	3301      	adds	r3, #1
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d38b      	bcc.n	80054b8 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f000 f83a 	bl	800563c <RTC_WeekDayNum>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	731a      	strb	r2, [r3, #12]
}
 80055d0:	bf00      	nop
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e01d      	b.n	800562e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	4a10      	ldr	r2, [pc, #64]	; (8005638 <RTC_IsLeapYear+0x60>)
 80055f6:	fba2 1203 	umull	r1, r2, r2, r3
 80055fa:	0952      	lsrs	r2, r2, #5
 80055fc:	2164      	movs	r1, #100	; 0x64
 80055fe:	fb01 f202 	mul.w	r2, r1, r2
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800560a:	2301      	movs	r3, #1
 800560c:	e00f      	b.n	800562e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	4a09      	ldr	r2, [pc, #36]	; (8005638 <RTC_IsLeapYear+0x60>)
 8005612:	fba2 1203 	umull	r1, r2, r2, r3
 8005616:	09d2      	lsrs	r2, r2, #7
 8005618:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800561c:	fb01 f202 	mul.w	r2, r1, r2
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800562c:	2300      	movs	r3, #0
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	51eb851f 	.word	0x51eb851f

0800563c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
 8005648:	4613      	mov	r3, r2
 800564a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800565a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d82d      	bhi.n	80056be <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <RTC_WeekDayNum+0xe4>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	085a      	lsrs	r2, r3, #1
 8005676:	78bb      	ldrb	r3, [r7, #2]
 8005678:	441a      	add	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	441a      	add	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3b01      	subs	r3, #1
 8005682:	089b      	lsrs	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3b01      	subs	r3, #1
 800568a:	4926      	ldr	r1, [pc, #152]	; (8005724 <RTC_WeekDayNum+0xe8>)
 800568c:	fba1 1303 	umull	r1, r3, r1, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3b01      	subs	r3, #1
 8005698:	4922      	ldr	r1, [pc, #136]	; (8005724 <RTC_WeekDayNum+0xe8>)
 800569a:	fba1 1303 	umull	r1, r3, r1, r3
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	4413      	add	r3, r2
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <RTC_WeekDayNum+0xec>)
 80056a6:	fba3 1302 	umull	r1, r3, r3, r2
 80056aa:	1ad1      	subs	r1, r2, r3
 80056ac:	0849      	lsrs	r1, r1, #1
 80056ae:	440b      	add	r3, r1
 80056b0:	0899      	lsrs	r1, r3, #2
 80056b2:	460b      	mov	r3, r1
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a5b      	subs	r3, r3, r1
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e029      	b.n	8005712 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <RTC_WeekDayNum+0xe4>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	085a      	lsrs	r2, r3, #1
 80056d2:	78bb      	ldrb	r3, [r7, #2]
 80056d4:	441a      	add	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	441a      	add	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4910      	ldr	r1, [pc, #64]	; (8005724 <RTC_WeekDayNum+0xe8>)
 80056e4:	fba1 1303 	umull	r1, r3, r1, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	490d      	ldr	r1, [pc, #52]	; (8005724 <RTC_WeekDayNum+0xe8>)
 80056f0:	fba1 1303 	umull	r1, r3, r1, r3
 80056f4:	09db      	lsrs	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <RTC_WeekDayNum+0xec>)
 80056fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005700:	1ad1      	subs	r1, r2, r3
 8005702:	0849      	lsrs	r1, r1, #1
 8005704:	440b      	add	r3, r1
 8005706:	0899      	lsrs	r1, r3, #2
 8005708:	460b      	mov	r3, r1
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b2db      	uxtb	r3, r3
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	38e38e39 	.word	0x38e38e39
 8005724:	51eb851f 	.word	0x51eb851f
 8005728:	24924925 	.word	0x24924925

0800572c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e076      	b.n	800582c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574e:	d009      	beq.n	8005764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
 8005756:	e005      	b.n	8005764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc f824 	bl	80017cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	ea42 0103 	orr.w	r1, r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	0c1a      	lsrs	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f002 0204 	and.w	r2, r2, #4
 800580a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Transmit+0x22>
 8005852:	2302      	movs	r3, #2
 8005854:	e12d      	b.n	8005ab2 <HAL_SPI_Transmit+0x27e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585e:	f7fc fb17 	bl	8001e90 <HAL_GetTick>
 8005862:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005874:	2302      	movs	r3, #2
 8005876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005878:	e116      	b.n	8005aa8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Transmit+0x52>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800588a:	e10d      	b.n	8005aa8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2203      	movs	r2, #3
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d10f      	bne.n	80058f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d007      	beq.n	8005912 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591a:	d14f      	bne.n	80059bc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Transmit+0xf6>
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d142      	bne.n	80059b0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	881a      	ldrh	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800594e:	e02f      	b.n	80059b0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d112      	bne.n	8005984 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	881a      	ldrh	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	1c9a      	adds	r2, r3, #2
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	86da      	strh	r2, [r3, #54]	; 0x36
 8005982:	e015      	b.n	80059b0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fc fa84 	bl	8001e90 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Transmit+0x168>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Transmit+0x16e>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80059ae:	e07b      	b.n	8005aa8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1ca      	bne.n	8005950 <HAL_SPI_Transmit+0x11c>
 80059ba:	e050      	b.n	8005a5e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Transmit+0x196>
 80059c4:	8afb      	ldrh	r3, [r7, #22]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d144      	bne.n	8005a54 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059f0:	e030      	b.n	8005a54 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d113      	bne.n	8005a28 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	7812      	ldrb	r2, [r2, #0]
 8005a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a26:	e015      	b.n	8005a54 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a28:	f7fc fa32 	bl	8001e90 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d803      	bhi.n	8005a40 <HAL_SPI_Transmit+0x20c>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_Transmit+0x212>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a52:	e029      	b.n	8005aa8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1c9      	bne.n	80059f2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fa62 	bl	8005f2c <SPI_EndRxTxTransaction>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e003      	b.n	8005aa8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b08c      	sub	sp, #48	; 0x30
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x26>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e198      	b.n	8005e12 <HAL_SPI_TransmitReceive+0x358>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae8:	f7fc f9d2 	bl	8001e90 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d00f      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x70>
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b10:	d107      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x68>
 8005b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d003      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
 8005b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b28:	e16d      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x82>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x82>
 8005b36:	887b      	ldrh	r3, [r7, #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b42:	e160      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d003      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2205      	movs	r2, #5
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	887a      	ldrh	r2, [r7, #2]
 8005b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	887a      	ldrh	r2, [r7, #2]
 8005b7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	887a      	ldrh	r2, [r7, #2]
 8005b80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d007      	beq.n	8005bac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d17c      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x10a>
 8005bbe:	8b7b      	ldrh	r3, [r7, #26]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d16a      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	881a      	ldrh	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be8:	e057      	b.n	8005c9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d11b      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x176>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x176>
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d113      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d119      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x1b8>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d014      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	b292      	uxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c72:	f7fc f90d 	bl	8001e90 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d80b      	bhi.n	8005c9a <HAL_SPI_TransmitReceive+0x1e0>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d007      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005c98:	e0b5      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1a2      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x130>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d19d      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x130>
 8005cae:	e080      	b.n	8005db2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x204>
 8005cb8:	8b7b      	ldrh	r3, [r7, #26]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d16f      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce4:	e05b      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d11c      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x274>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d017      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x274>
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d114      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d119      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x2b6>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d70:	f7fc f88e 	bl	8001e90 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d803      	bhi.n	8005d88 <HAL_SPI_TransmitReceive+0x2ce>
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d102      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x2d4>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005d9c:	e033      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d19e      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x22c>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d199      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8b8 	bl	8005f2c <SPI_EndRxTxTransaction>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dce:	e01a      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfc:	e003      	b.n	8005e06 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3730      	adds	r7, #48	; 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e2c:	f7fc f830 	bl	8001e90 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e3c:	f7fc f828 	bl	8001e90 <HAL_GetTick>
 8005e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	0d1b      	lsrs	r3, r3, #20
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e52:	e054      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d050      	beq.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e5c:	f7fc f818 	bl	8001e90 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d111      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	d004      	beq.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d107      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d10f      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e017      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d19b      	bne.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000008 	.word	0x20000008

08005f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff ff6a 	bl	8005e1c <SPI_WaitFlagStateUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e000      	b.n	8005f60 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e041      	b.n	8005ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb fe0c 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f000 fc9c 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e03a      	b.n	8006096 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_TIM_Base_Start_IT+0x98>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x58>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d009      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x58>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x58>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d111      	bne.n	8006084 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b06      	cmp	r3, #6
 8006070:	d010      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	e007      	b.n	8006094 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800

080060ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e041      	b.n	8006142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f839 	bl	800614a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 fbfa 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <HAL_TIM_PWM_Start+0x24>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e022      	b.n	80061c6 <HAL_TIM_PWM_Start+0x6a>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b04      	cmp	r3, #4
 8006184:	d109      	bne.n	800619a <HAL_TIM_PWM_Start+0x3e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e015      	b.n	80061c6 <HAL_TIM_PWM_Start+0x6a>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_PWM_Start+0x58>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e008      	b.n	80061c6 <HAL_TIM_PWM_Start+0x6a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e05e      	b.n	800628c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0x82>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	e013      	b.n	8006206 <HAL_TIM_PWM_Start+0xaa>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0x92>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_PWM_Start+0xaa>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fc:	e003      	b.n	8006206 <HAL_TIM_PWM_Start+0xaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fde8 	bl	8006de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_TIM_PWM_Start+0x138>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d107      	bne.n	800622e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <HAL_TIM_PWM_Start+0x138>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_TIM_PWM_Start+0xfa>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d009      	beq.n	8006256 <HAL_TIM_PWM_Start+0xfa>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a14      	ldr	r2, [pc, #80]	; (8006298 <HAL_TIM_PWM_Start+0x13c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_TIM_PWM_Start+0xfa>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <HAL_TIM_PWM_Start+0x140>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d111      	bne.n	800627a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b06      	cmp	r3, #6
 8006266:	d010      	beq.n	800628a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006278:	e007      	b.n	800628a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800

080062a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fd96 	bl	8006de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_TIM_PWM_Stop+0xc4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d117      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10f      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	f240 4344 	movw	r3, #1092	; 0x444
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10f      	bne.n	8006322 <HAL_TIM_PWM_Stop+0x82>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	f240 4344 	movw	r3, #1092	; 0x444
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <HAL_TIM_PWM_Stop+0x82>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Stop+0x92>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	e013      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Stop+0xa2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006340:	e00b      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Stop+0xb2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	e003      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40012c00 	.word	0x40012c00

08006368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d122      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d11b      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0202 	mvn.w	r2, #2
 8006394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa7f 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 80063b0:	e005      	b.n	80063be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa72 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fa81 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d122      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0204 	mvn.w	r2, #4
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa55 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa48 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fa57 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0208 	mvn.w	r2, #8
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2204      	movs	r2, #4
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa2b 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa1e 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa2d 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b10      	cmp	r3, #16
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0210 	mvn.w	r2, #16
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2208      	movs	r2, #8
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa01 	bl	80068ae <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9f4 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa03 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0201 	mvn.w	r2, #1
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9cf 	bl	800688a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d10e      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d107      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fcf1 	bl	8006efa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d10e      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d107      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9c7 	bl	80068d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b20      	cmp	r3, #32
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0220 	mvn.w	r2, #32
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fcbc 	bl	8006ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006592:	2302      	movs	r3, #2
 8006594:	e0ae      	b.n	80066f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b0c      	cmp	r3, #12
 80065a2:	f200 809f 	bhi.w	80066e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065e1 	.word	0x080065e1
 80065b0:	080066e5 	.word	0x080066e5
 80065b4:	080066e5 	.word	0x080066e5
 80065b8:	080066e5 	.word	0x080066e5
 80065bc:	08006621 	.word	0x08006621
 80065c0:	080066e5 	.word	0x080066e5
 80065c4:	080066e5 	.word	0x080066e5
 80065c8:	080066e5 	.word	0x080066e5
 80065cc:	08006663 	.word	0x08006663
 80065d0:	080066e5 	.word	0x080066e5
 80065d4:	080066e5 	.word	0x080066e5
 80065d8:	080066e5 	.word	0x080066e5
 80065dc:	080066a3 	.word	0x080066a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f9de 	bl	80069a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0208 	orr.w	r2, r2, #8
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	619a      	str	r2, [r3, #24]
      break;
 800661e:	e064      	b.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa24 	bl	8006a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	619a      	str	r2, [r3, #24]
      break;
 8006660:	e043      	b.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fa6d 	bl	8006b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0208 	orr.w	r2, r2, #8
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0204 	bic.w	r2, r2, #4
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	61da      	str	r2, [r3, #28]
      break;
 80066a0:	e023      	b.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fab7 	bl	8006c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	021a      	lsls	r2, r3, #8
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	61da      	str	r2, [r3, #28]
      break;
 80066e2:	e002      	b.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIM_ConfigClockSource+0x1c>
 8006714:	2302      	movs	r3, #2
 8006716:	e0b4      	b.n	8006882 <HAL_TIM_ConfigClockSource+0x186>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800673e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006750:	d03e      	beq.n	80067d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006756:	f200 8087 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675e:	f000 8086 	beq.w	800686e <HAL_TIM_ConfigClockSource+0x172>
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006766:	d87f      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006768:	2b70      	cmp	r3, #112	; 0x70
 800676a:	d01a      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0xa6>
 800676c:	2b70      	cmp	r3, #112	; 0x70
 800676e:	d87b      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006770:	2b60      	cmp	r3, #96	; 0x60
 8006772:	d050      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x11a>
 8006774:	2b60      	cmp	r3, #96	; 0x60
 8006776:	d877      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b50      	cmp	r3, #80	; 0x50
 800677a:	d03c      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0xfa>
 800677c:	2b50      	cmp	r3, #80	; 0x50
 800677e:	d873      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d058      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x13a>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d86f      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b30      	cmp	r3, #48	; 0x30
 800678a:	d064      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	2b30      	cmp	r3, #48	; 0x30
 800678e:	d86b      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b20      	cmp	r3, #32
 8006792:	d060      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x15a>
 8006794:	2b20      	cmp	r3, #32
 8006796:	d867      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d05c      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x15a>
 800679c:	2b10      	cmp	r3, #16
 800679e:	d05a      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x15a>
 80067a0:	e062      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067b2:	f000 faf8 	bl	8006da6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
      break;
 80067ce:	e04f      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067e0:	f000 fae1 	bl	8006da6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f2:	609a      	str	r2, [r3, #8]
      break;
 80067f4:	e03c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fa58 	bl	8006cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2150      	movs	r1, #80	; 0x50
 800680e:	4618      	mov	r0, r3
 8006810:	f000 faaf 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006814:	e02c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006822:	461a      	mov	r2, r3
 8006824:	f000 fa76 	bl	8006d14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2160      	movs	r1, #96	; 0x60
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fa9f 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006834:	e01c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006842:	461a      	mov	r2, r3
 8006844:	f000 fa38 	bl	8006cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2140      	movs	r1, #64	; 0x40
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fa8f 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006854:	e00c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f000 fa86 	bl	8006d72 <TIM_ITRx_SetConfig>
      break;
 8006866:	e003      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      break;
 800686c:	e000      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800686e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a29      	ldr	r2, [pc, #164]	; (800699c <TIM_Base_SetConfig+0xb8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_Base_SetConfig+0x30>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d007      	beq.n	8006914 <TIM_Base_SetConfig+0x30>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <TIM_Base_SetConfig+0xbc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0x30>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <TIM_Base_SetConfig+0xc0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d108      	bne.n	8006926 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <TIM_Base_SetConfig+0xb8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0x62>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0x62>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <TIM_Base_SetConfig+0xbc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0x62>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <TIM_Base_SetConfig+0xc0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a07      	ldr	r2, [pc, #28]	; (800699c <TIM_Base_SetConfig+0xb8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800

080069a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f023 0201 	bic.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f023 0302 	bic.w	r3, r3, #2
 80069f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <TIM_OC1_SetConfig+0xc8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10c      	bne.n	8006a1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0308 	bic.w	r3, r3, #8
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <TIM_OC1_SetConfig+0xc8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d111      	bne.n	8006a4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00

08006a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0320 	bic.w	r3, r3, #32
 8006abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <TIM_OC2_SetConfig+0xd0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10d      	bne.n	8006af0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC2_SetConfig+0xd0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d113      	bne.n	8006b20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	40012c00 	.word	0x40012c00

08006b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <TIM_OC3_SetConfig+0xd0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10d      	bne.n	8006bc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <TIM_OC3_SetConfig+0xd0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d113      	bne.n	8006bf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40012c00 	.word	0x40012c00

08006c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	031b      	lsls	r3, r3, #12
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <TIM_OC4_SetConfig+0x98>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	40012c00 	.word	0x40012c00

08006cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f023 0201 	bic.w	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 030a 	bic.w	r3, r3, #10
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0210 	bic.w	r2, r3, #16
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	031b      	lsls	r3, r3, #12
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f043 0307 	orr.w	r3, r3, #7
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	609a      	str	r2, [r3, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	021a      	lsls	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	609a      	str	r2, [r3, #8]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	2201      	movs	r2, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1a      	ldr	r2, [r3, #32]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	401a      	ands	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e046      	b.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a12      	ldr	r2, [pc, #72]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a10      	ldr	r2, [pc, #64]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800

08006ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e042      	b.n	8006fa4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fa fee2 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2224      	movs	r2, #36	; 0x24
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f91d 	bl	8007190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d16d      	bne.n	80070a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_UART_Transmit+0x2c>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e066      	b.n	80070aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2221      	movs	r2, #33	; 0x21
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fea:	f7fa ff51 	bl	8001e90 <HAL_GetTick>
 8006fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d108      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e003      	b.n	8007020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007020:	e02a      	b.n	8007078 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f840 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e036      	b.n	80070aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cf      	bne.n	8007022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f810 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b090      	sub	sp, #64	; 0x40
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c2:	e050      	b.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d04c      	beq.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80070d2:	f7fa fedd 	bl	8001e90 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070de:	429a      	cmp	r2, r3
 80070e0:	d241      	bcs.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007102:	637a      	str	r2, [r7, #52]	; 0x34
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3314      	adds	r3, #20
 800711c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	63bb      	str	r3, [r7, #56]	; 0x38
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007136:	623a      	str	r2, [r7, #32]
 8007138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69f9      	ldr	r1, [r7, #28]
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	61bb      	str	r3, [r7, #24]
   return(result);
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e00f      	b.n	8007186 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4013      	ands	r3, r2
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	bf0c      	ite	eq
 8007176:	2301      	moveq	r3, #1
 8007178:	2300      	movne	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	429a      	cmp	r2, r3
 8007182:	d09f      	beq.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3740      	adds	r7, #64	; 0x40
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071ca:	f023 030c 	bic.w	r3, r3, #12
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2c      	ldr	r2, [pc, #176]	; (80072a4 <UART_SetConfig+0x114>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fd fb0e 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	e002      	b.n	8007206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fd faf6 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8007204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009a      	lsls	r2, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <UART_SetConfig+0x118>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	0119      	lsls	r1, r3, #4
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009a      	lsls	r2, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	fbb2 f2f3 	udiv	r2, r2, r3
 800723c:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <UART_SetConfig+0x118>)
 800723e:	fba3 0302 	umull	r0, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2064      	movs	r0, #100	; 0x64
 8007246:	fb00 f303 	mul.w	r3, r0, r3
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	3332      	adds	r3, #50	; 0x32
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <UART_SetConfig+0x118>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725c:	4419      	add	r1, r3
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009a      	lsls	r2, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	fbb2 f2f3 	udiv	r2, r2, r3
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <UART_SetConfig+0x118>)
 8007276:	fba3 0302 	umull	r0, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2064      	movs	r0, #100	; 0x64
 800727e:	fb00 f303 	mul.w	r3, r0, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	; 0x32
 8007288:	4a07      	ldr	r2, [pc, #28]	; (80072a8 <UART_SetConfig+0x118>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	440a      	add	r2, r1
 800729a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40013800 	.word	0x40013800
 80072a8:	51eb851f 	.word	0x51eb851f

080072ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80072b0:	4904      	ldr	r1, [pc, #16]	; (80072c4 <MX_FATFS_Init+0x18>)
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <MX_FATFS_Init+0x1c>)
 80072b4:	f000 f8b0 	bl	8007418 <FATFS_LinkDriver>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <MX_FATFS_Init+0x20>)
 80072be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072c0:	bf00      	nop
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200002dc 	.word	0x200002dc
 80072c8:	20000014 	.word	0x20000014
 80072cc:	200002d8 	.word	0x200002d8

080072d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f9d9 	bl	8000694 <SD_disk_initialize>
 80072e2:	4603      	mov	r3, r0
 80072e4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	4603      	mov	r3, r0
 80072f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7f9 fab0 	bl	8000860 <SD_disk_status>
 8007300:	4603      	mov	r3, r0
 8007302:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800731c:	7bf8      	ldrb	r0, [r7, #15]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	f7f9 fab0 	bl	8000888 <SD_disk_read>
 8007328:	4603      	mov	r3, r0
 800732a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8007344:	7bf8      	ldrb	r0, [r7, #15]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	f7f9 fb06 	bl	800095c <SD_disk_write>
 8007350:	4603      	mov	r3, r0
 8007352:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	603a      	str	r2, [r7, #0]
 8007366:	71fb      	strb	r3, [r7, #7]
 8007368:	460b      	mov	r3, r1
 800736a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	79b9      	ldrb	r1, [r7, #6]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 fb76 	bl	8000a64 <SD_disk_ioctl>
 8007378:	4603      	mov	r3, r0
 800737a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800739a:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 800739c:	7a5b      	ldrb	r3, [r3, #9]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d831      	bhi.n	8007408 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073a4:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073a6:	7a5b      	ldrb	r3, [r3, #9]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	4b19      	ldr	r3, [pc, #100]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073ae:	2100      	movs	r1, #0
 80073b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073b4:	7a5b      	ldrb	r3, [r3, #9]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	4a16      	ldr	r2, [pc, #88]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80073c2:	4b14      	ldr	r3, [pc, #80]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073c4:	7a5b      	ldrb	r3, [r3, #9]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073cc:	4413      	add	r3, r2
 80073ce:	79fa      	ldrb	r2, [r7, #7]
 80073d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073d4:	7a5b      	ldrb	r3, [r3, #9]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	b2d1      	uxtb	r1, r2
 80073dc:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <FATFS_LinkDriverEx+0x90>)
 80073de:	7251      	strb	r1, [r2, #9]
 80073e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073e2:	7dbb      	ldrb	r3, [r7, #22]
 80073e4:	3330      	adds	r3, #48	; 0x30
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3301      	adds	r3, #1
 80073f0:	223a      	movs	r2, #58	; 0x3a
 80073f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3302      	adds	r3, #2
 80073f8:	222f      	movs	r2, #47	; 0x2f
 80073fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3303      	adds	r3, #3
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	200002e0 	.word	0x200002e0

08007418 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007422:	2200      	movs	r2, #0
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ffac 	bl	8007384 <FATFS_LinkDriverEx>
 800742c:	4603      	mov	r3, r0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <siprintf>:
 8007438:	b40e      	push	{r1, r2, r3}
 800743a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800743e:	b500      	push	{lr}
 8007440:	b09c      	sub	sp, #112	; 0x70
 8007442:	ab1d      	add	r3, sp, #116	; 0x74
 8007444:	9002      	str	r0, [sp, #8]
 8007446:	9006      	str	r0, [sp, #24]
 8007448:	9107      	str	r1, [sp, #28]
 800744a:	9104      	str	r1, [sp, #16]
 800744c:	4808      	ldr	r0, [pc, #32]	; (8007470 <siprintf+0x38>)
 800744e:	4909      	ldr	r1, [pc, #36]	; (8007474 <siprintf+0x3c>)
 8007450:	f853 2b04 	ldr.w	r2, [r3], #4
 8007454:	9105      	str	r1, [sp, #20]
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	a902      	add	r1, sp, #8
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f000 f98e 	bl	800777c <_svfiprintf_r>
 8007460:	2200      	movs	r2, #0
 8007462:	9b02      	ldr	r3, [sp, #8]
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	b01c      	add	sp, #112	; 0x70
 8007468:	f85d eb04 	ldr.w	lr, [sp], #4
 800746c:	b003      	add	sp, #12
 800746e:	4770      	bx	lr
 8007470:	20000074 	.word	0x20000074
 8007474:	ffff0208 	.word	0xffff0208

08007478 <memset>:
 8007478:	4603      	mov	r3, r0
 800747a:	4402      	add	r2, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <__errno>:
 8007488:	4b01      	ldr	r3, [pc, #4]	; (8007490 <__errno+0x8>)
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000074 	.word	0x20000074

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	2600      	movs	r6, #0
 8007498:	4d0c      	ldr	r5, [pc, #48]	; (80074cc <__libc_init_array+0x38>)
 800749a:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749c:	1b64      	subs	r4, r4, r5
 800749e:	10a4      	asrs	r4, r4, #2
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	f000 fc7a 	bl	8007d9c <_init>
 80074a8:	2600      	movs	r6, #0
 80074aa:	4d0a      	ldr	r5, [pc, #40]	; (80074d4 <__libc_init_array+0x40>)
 80074ac:	4c0a      	ldr	r4, [pc, #40]	; (80074d8 <__libc_init_array+0x44>)
 80074ae:	1b64      	subs	r4, r4, r5
 80074b0:	10a4      	asrs	r4, r4, #2
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	08007e98 	.word	0x08007e98
 80074d0:	08007e98 	.word	0x08007e98
 80074d4:	08007e98 	.word	0x08007e98
 80074d8:	08007e9c 	.word	0x08007e9c

080074dc <__retarget_lock_acquire_recursive>:
 80074dc:	4770      	bx	lr

080074de <__retarget_lock_release_recursive>:
 80074de:	4770      	bx	lr

080074e0 <_free_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4605      	mov	r5, r0
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d040      	beq.n	800756a <_free_r+0x8a>
 80074e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ec:	1f0c      	subs	r4, r1, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfb8      	it	lt
 80074f2:	18e4      	addlt	r4, r4, r3
 80074f4:	f000 f8dc 	bl	80076b0 <__malloc_lock>
 80074f8:	4a1c      	ldr	r2, [pc, #112]	; (800756c <_free_r+0x8c>)
 80074fa:	6813      	ldr	r3, [r2, #0]
 80074fc:	b933      	cbnz	r3, 800750c <_free_r+0x2c>
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	6014      	str	r4, [r2, #0]
 8007502:	4628      	mov	r0, r5
 8007504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007508:	f000 b8d8 	b.w	80076bc <__malloc_unlock>
 800750c:	42a3      	cmp	r3, r4
 800750e:	d908      	bls.n	8007522 <_free_r+0x42>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	1821      	adds	r1, r4, r0
 8007514:	428b      	cmp	r3, r1
 8007516:	bf01      	itttt	eq
 8007518:	6819      	ldreq	r1, [r3, #0]
 800751a:	685b      	ldreq	r3, [r3, #4]
 800751c:	1809      	addeq	r1, r1, r0
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	e7ed      	b.n	80074fe <_free_r+0x1e>
 8007522:	461a      	mov	r2, r3
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b10b      	cbz	r3, 800752c <_free_r+0x4c>
 8007528:	42a3      	cmp	r3, r4
 800752a:	d9fa      	bls.n	8007522 <_free_r+0x42>
 800752c:	6811      	ldr	r1, [r2, #0]
 800752e:	1850      	adds	r0, r2, r1
 8007530:	42a0      	cmp	r0, r4
 8007532:	d10b      	bne.n	800754c <_free_r+0x6c>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	4401      	add	r1, r0
 8007538:	1850      	adds	r0, r2, r1
 800753a:	4283      	cmp	r3, r0
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	d1e0      	bne.n	8007502 <_free_r+0x22>
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4408      	add	r0, r1
 8007546:	6010      	str	r0, [r2, #0]
 8007548:	6053      	str	r3, [r2, #4]
 800754a:	e7da      	b.n	8007502 <_free_r+0x22>
 800754c:	d902      	bls.n	8007554 <_free_r+0x74>
 800754e:	230c      	movs	r3, #12
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	e7d6      	b.n	8007502 <_free_r+0x22>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	1821      	adds	r1, r4, r0
 8007558:	428b      	cmp	r3, r1
 800755a:	bf01      	itttt	eq
 800755c:	6819      	ldreq	r1, [r3, #0]
 800755e:	685b      	ldreq	r3, [r3, #4]
 8007560:	1809      	addeq	r1, r1, r0
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6054      	str	r4, [r2, #4]
 8007568:	e7cb      	b.n	8007502 <_free_r+0x22>
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	2000042c 	.word	0x2000042c

08007570 <sbrk_aligned>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4e0e      	ldr	r6, [pc, #56]	; (80075ac <sbrk_aligned+0x3c>)
 8007574:	460c      	mov	r4, r1
 8007576:	6831      	ldr	r1, [r6, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	b911      	cbnz	r1, 8007582 <sbrk_aligned+0x12>
 800757c:	f000 fbaa 	bl	8007cd4 <_sbrk_r>
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fba5 	bl	8007cd4 <_sbrk_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d00a      	beq.n	80075a4 <sbrk_aligned+0x34>
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d007      	beq.n	80075a8 <sbrk_aligned+0x38>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fb9a 	bl	8007cd4 <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d101      	bne.n	80075a8 <sbrk_aligned+0x38>
 80075a4:	f04f 34ff 	mov.w	r4, #4294967295
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	20000430 	.word	0x20000430

080075b0 <_malloc_r>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	1ccd      	adds	r5, r1, #3
 80075b6:	f025 0503 	bic.w	r5, r5, #3
 80075ba:	3508      	adds	r5, #8
 80075bc:	2d0c      	cmp	r5, #12
 80075be:	bf38      	it	cc
 80075c0:	250c      	movcc	r5, #12
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	4607      	mov	r7, r0
 80075c6:	db01      	blt.n	80075cc <_malloc_r+0x1c>
 80075c8:	42a9      	cmp	r1, r5
 80075ca:	d905      	bls.n	80075d8 <_malloc_r+0x28>
 80075cc:	230c      	movs	r3, #12
 80075ce:	2600      	movs	r6, #0
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076ac <_malloc_r+0xfc>
 80075dc:	f000 f868 	bl	80076b0 <__malloc_lock>
 80075e0:	f8d8 3000 	ldr.w	r3, [r8]
 80075e4:	461c      	mov	r4, r3
 80075e6:	bb5c      	cbnz	r4, 8007640 <_malloc_r+0x90>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff ffc0 	bl	8007570 <sbrk_aligned>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	4604      	mov	r4, r0
 80075f4:	d155      	bne.n	80076a2 <_malloc_r+0xf2>
 80075f6:	f8d8 4000 	ldr.w	r4, [r8]
 80075fa:	4626      	mov	r6, r4
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	d145      	bne.n	800768c <_malloc_r+0xdc>
 8007600:	2c00      	cmp	r4, #0
 8007602:	d048      	beq.n	8007696 <_malloc_r+0xe6>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	4631      	mov	r1, r6
 8007608:	4638      	mov	r0, r7
 800760a:	eb04 0903 	add.w	r9, r4, r3
 800760e:	f000 fb61 	bl	8007cd4 <_sbrk_r>
 8007612:	4581      	cmp	r9, r0
 8007614:	d13f      	bne.n	8007696 <_malloc_r+0xe6>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	4638      	mov	r0, r7
 800761a:	1a6d      	subs	r5, r5, r1
 800761c:	4629      	mov	r1, r5
 800761e:	f7ff ffa7 	bl	8007570 <sbrk_aligned>
 8007622:	3001      	adds	r0, #1
 8007624:	d037      	beq.n	8007696 <_malloc_r+0xe6>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	442b      	add	r3, r5
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d038      	beq.n	80076a6 <_malloc_r+0xf6>
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	42a2      	cmp	r2, r4
 8007638:	d12b      	bne.n	8007692 <_malloc_r+0xe2>
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e00f      	b.n	8007660 <_malloc_r+0xb0>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	1b52      	subs	r2, r2, r5
 8007644:	d41f      	bmi.n	8007686 <_malloc_r+0xd6>
 8007646:	2a0b      	cmp	r2, #11
 8007648:	d917      	bls.n	800767a <_malloc_r+0xca>
 800764a:	1961      	adds	r1, r4, r5
 800764c:	42a3      	cmp	r3, r4
 800764e:	6025      	str	r5, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	6059      	strne	r1, [r3, #4]
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	bf08      	it	eq
 8007658:	f8c8 1000 	streq.w	r1, [r8]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4638      	mov	r0, r7
 8007662:	f104 060b 	add.w	r6, r4, #11
 8007666:	f000 f829 	bl	80076bc <__malloc_unlock>
 800766a:	f026 0607 	bic.w	r6, r6, #7
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	1af2      	subs	r2, r6, r3
 8007672:	d0ae      	beq.n	80075d2 <_malloc_r+0x22>
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	50a3      	str	r3, [r4, r2]
 8007678:	e7ab      	b.n	80075d2 <_malloc_r+0x22>
 800767a:	42a3      	cmp	r3, r4
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	d1dd      	bne.n	800763c <_malloc_r+0x8c>
 8007680:	f8c8 2000 	str.w	r2, [r8]
 8007684:	e7ec      	b.n	8007660 <_malloc_r+0xb0>
 8007686:	4623      	mov	r3, r4
 8007688:	6864      	ldr	r4, [r4, #4]
 800768a:	e7ac      	b.n	80075e6 <_malloc_r+0x36>
 800768c:	4634      	mov	r4, r6
 800768e:	6876      	ldr	r6, [r6, #4]
 8007690:	e7b4      	b.n	80075fc <_malloc_r+0x4c>
 8007692:	4613      	mov	r3, r2
 8007694:	e7cc      	b.n	8007630 <_malloc_r+0x80>
 8007696:	230c      	movs	r3, #12
 8007698:	4638      	mov	r0, r7
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	f000 f80e 	bl	80076bc <__malloc_unlock>
 80076a0:	e797      	b.n	80075d2 <_malloc_r+0x22>
 80076a2:	6025      	str	r5, [r4, #0]
 80076a4:	e7dc      	b.n	8007660 <_malloc_r+0xb0>
 80076a6:	605b      	str	r3, [r3, #4]
 80076a8:	deff      	udf	#255	; 0xff
 80076aa:	bf00      	nop
 80076ac:	2000042c 	.word	0x2000042c

080076b0 <__malloc_lock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_lock+0x8>)
 80076b2:	f7ff bf13 	b.w	80074dc <__retarget_lock_acquire_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000428 	.word	0x20000428

080076bc <__malloc_unlock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__malloc_unlock+0x8>)
 80076be:	f7ff bf0e 	b.w	80074de <__retarget_lock_release_recursive>
 80076c2:	bf00      	nop
 80076c4:	20000428 	.word	0x20000428

080076c8 <__ssputs_r>:
 80076c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	461f      	mov	r7, r3
 80076ce:	688e      	ldr	r6, [r1, #8]
 80076d0:	4682      	mov	sl, r0
 80076d2:	42be      	cmp	r6, r7
 80076d4:	460c      	mov	r4, r1
 80076d6:	4690      	mov	r8, r2
 80076d8:	680b      	ldr	r3, [r1, #0]
 80076da:	d82c      	bhi.n	8007736 <__ssputs_r+0x6e>
 80076dc:	898a      	ldrh	r2, [r1, #12]
 80076de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e2:	d026      	beq.n	8007732 <__ssputs_r+0x6a>
 80076e4:	6965      	ldr	r5, [r4, #20]
 80076e6:	6909      	ldr	r1, [r1, #16]
 80076e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076ec:	eba3 0901 	sub.w	r9, r3, r1
 80076f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076f4:	1c7b      	adds	r3, r7, #1
 80076f6:	444b      	add	r3, r9
 80076f8:	106d      	asrs	r5, r5, #1
 80076fa:	429d      	cmp	r5, r3
 80076fc:	bf38      	it	cc
 80076fe:	461d      	movcc	r5, r3
 8007700:	0553      	lsls	r3, r2, #21
 8007702:	d527      	bpl.n	8007754 <__ssputs_r+0x8c>
 8007704:	4629      	mov	r1, r5
 8007706:	f7ff ff53 	bl	80075b0 <_malloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	b360      	cbz	r0, 8007768 <__ssputs_r+0xa0>
 800770e:	464a      	mov	r2, r9
 8007710:	6921      	ldr	r1, [r4, #16]
 8007712:	f000 fafd 	bl	8007d10 <memcpy>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	6126      	str	r6, [r4, #16]
 8007724:	444e      	add	r6, r9
 8007726:	6026      	str	r6, [r4, #0]
 8007728:	463e      	mov	r6, r7
 800772a:	6165      	str	r5, [r4, #20]
 800772c:	eba5 0509 	sub.w	r5, r5, r9
 8007730:	60a5      	str	r5, [r4, #8]
 8007732:	42be      	cmp	r6, r7
 8007734:	d900      	bls.n	8007738 <__ssputs_r+0x70>
 8007736:	463e      	mov	r6, r7
 8007738:	4632      	mov	r2, r6
 800773a:	4641      	mov	r1, r8
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	f000 faaf 	bl	8007ca0 <memmove>
 8007742:	2000      	movs	r0, #0
 8007744:	68a3      	ldr	r3, [r4, #8]
 8007746:	1b9b      	subs	r3, r3, r6
 8007748:	60a3      	str	r3, [r4, #8]
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	4433      	add	r3, r6
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	462a      	mov	r2, r5
 8007756:	f000 fae9 	bl	8007d2c <_realloc_r>
 800775a:	4606      	mov	r6, r0
 800775c:	2800      	cmp	r0, #0
 800775e:	d1e0      	bne.n	8007722 <__ssputs_r+0x5a>
 8007760:	4650      	mov	r0, sl
 8007762:	6921      	ldr	r1, [r4, #16]
 8007764:	f7ff febc 	bl	80074e0 <_free_r>
 8007768:	230c      	movs	r3, #12
 800776a:	f8ca 3000 	str.w	r3, [sl]
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	e7e9      	b.n	8007750 <__ssputs_r+0x88>

0800777c <_svfiprintf_r>:
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	4698      	mov	r8, r3
 8007782:	898b      	ldrh	r3, [r1, #12]
 8007784:	4607      	mov	r7, r0
 8007786:	061b      	lsls	r3, r3, #24
 8007788:	460d      	mov	r5, r1
 800778a:	4614      	mov	r4, r2
 800778c:	b09d      	sub	sp, #116	; 0x74
 800778e:	d50e      	bpl.n	80077ae <_svfiprintf_r+0x32>
 8007790:	690b      	ldr	r3, [r1, #16]
 8007792:	b963      	cbnz	r3, 80077ae <_svfiprintf_r+0x32>
 8007794:	2140      	movs	r1, #64	; 0x40
 8007796:	f7ff ff0b 	bl	80075b0 <_malloc_r>
 800779a:	6028      	str	r0, [r5, #0]
 800779c:	6128      	str	r0, [r5, #16]
 800779e:	b920      	cbnz	r0, 80077aa <_svfiprintf_r+0x2e>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e0d0      	b.n	800794c <_svfiprintf_r+0x1d0>
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	616b      	str	r3, [r5, #20]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9309      	str	r3, [sp, #36]	; 0x24
 80077b2:	2320      	movs	r3, #32
 80077b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077b8:	2330      	movs	r3, #48	; 0x30
 80077ba:	f04f 0901 	mov.w	r9, #1
 80077be:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007964 <_svfiprintf_r+0x1e8>
 80077c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ca:	4623      	mov	r3, r4
 80077cc:	469a      	mov	sl, r3
 80077ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d2:	b10a      	cbz	r2, 80077d8 <_svfiprintf_r+0x5c>
 80077d4:	2a25      	cmp	r2, #37	; 0x25
 80077d6:	d1f9      	bne.n	80077cc <_svfiprintf_r+0x50>
 80077d8:	ebba 0b04 	subs.w	fp, sl, r4
 80077dc:	d00b      	beq.n	80077f6 <_svfiprintf_r+0x7a>
 80077de:	465b      	mov	r3, fp
 80077e0:	4622      	mov	r2, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff ff6f 	bl	80076c8 <__ssputs_r>
 80077ea:	3001      	adds	r0, #1
 80077ec:	f000 80a9 	beq.w	8007942 <_svfiprintf_r+0x1c6>
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	445a      	add	r2, fp
 80077f4:	9209      	str	r2, [sp, #36]	; 0x24
 80077f6:	f89a 3000 	ldrb.w	r3, [sl]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a1 	beq.w	8007942 <_svfiprintf_r+0x1c6>
 8007800:	2300      	movs	r3, #0
 8007802:	f04f 32ff 	mov.w	r2, #4294967295
 8007806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780a:	f10a 0a01 	add.w	sl, sl, #1
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007816:	931a      	str	r3, [sp, #104]	; 0x68
 8007818:	4654      	mov	r4, sl
 800781a:	2205      	movs	r2, #5
 800781c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007820:	4850      	ldr	r0, [pc, #320]	; (8007964 <_svfiprintf_r+0x1e8>)
 8007822:	f000 fa67 	bl	8007cf4 <memchr>
 8007826:	9a04      	ldr	r2, [sp, #16]
 8007828:	b9d8      	cbnz	r0, 8007862 <_svfiprintf_r+0xe6>
 800782a:	06d0      	lsls	r0, r2, #27
 800782c:	bf44      	itt	mi
 800782e:	2320      	movmi	r3, #32
 8007830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007834:	0711      	lsls	r1, r2, #28
 8007836:	bf44      	itt	mi
 8007838:	232b      	movmi	r3, #43	; 0x2b
 800783a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800783e:	f89a 3000 	ldrb.w	r3, [sl]
 8007842:	2b2a      	cmp	r3, #42	; 0x2a
 8007844:	d015      	beq.n	8007872 <_svfiprintf_r+0xf6>
 8007846:	4654      	mov	r4, sl
 8007848:	2000      	movs	r0, #0
 800784a:	f04f 0c0a 	mov.w	ip, #10
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	4621      	mov	r1, r4
 8007852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007856:	3b30      	subs	r3, #48	; 0x30
 8007858:	2b09      	cmp	r3, #9
 800785a:	d94d      	bls.n	80078f8 <_svfiprintf_r+0x17c>
 800785c:	b1b0      	cbz	r0, 800788c <_svfiprintf_r+0x110>
 800785e:	9207      	str	r2, [sp, #28]
 8007860:	e014      	b.n	800788c <_svfiprintf_r+0x110>
 8007862:	eba0 0308 	sub.w	r3, r0, r8
 8007866:	fa09 f303 	lsl.w	r3, r9, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	46a2      	mov	sl, r4
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	e7d2      	b.n	8007818 <_svfiprintf_r+0x9c>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	9103      	str	r1, [sp, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfbb      	ittet	lt
 800787e:	425b      	neglt	r3, r3
 8007880:	f042 0202 	orrlt.w	r2, r2, #2
 8007884:	9307      	strge	r3, [sp, #28]
 8007886:	9307      	strlt	r3, [sp, #28]
 8007888:	bfb8      	it	lt
 800788a:	9204      	strlt	r2, [sp, #16]
 800788c:	7823      	ldrb	r3, [r4, #0]
 800788e:	2b2e      	cmp	r3, #46	; 0x2e
 8007890:	d10c      	bne.n	80078ac <_svfiprintf_r+0x130>
 8007892:	7863      	ldrb	r3, [r4, #1]
 8007894:	2b2a      	cmp	r3, #42	; 0x2a
 8007896:	d134      	bne.n	8007902 <_svfiprintf_r+0x186>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	3402      	adds	r4, #2
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	9203      	str	r2, [sp, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007968 <_svfiprintf_r+0x1ec>
 80078b0:	2203      	movs	r2, #3
 80078b2:	4650      	mov	r0, sl
 80078b4:	7821      	ldrb	r1, [r4, #0]
 80078b6:	f000 fa1d 	bl	8007cf4 <memchr>
 80078ba:	b138      	cbz	r0, 80078cc <_svfiprintf_r+0x150>
 80078bc:	2240      	movs	r2, #64	; 0x40
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	eba0 000a 	sub.w	r0, r0, sl
 80078c4:	4082      	lsls	r2, r0
 80078c6:	4313      	orrs	r3, r2
 80078c8:	3401      	adds	r4, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	2206      	movs	r2, #6
 80078d2:	4826      	ldr	r0, [pc, #152]	; (800796c <_svfiprintf_r+0x1f0>)
 80078d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078d8:	f000 fa0c 	bl	8007cf4 <memchr>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d038      	beq.n	8007952 <_svfiprintf_r+0x1d6>
 80078e0:	4b23      	ldr	r3, [pc, #140]	; (8007970 <_svfiprintf_r+0x1f4>)
 80078e2:	bb1b      	cbnz	r3, 800792c <_svfiprintf_r+0x1b0>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	3307      	adds	r3, #7
 80078e8:	f023 0307 	bic.w	r3, r3, #7
 80078ec:	3308      	adds	r3, #8
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	4433      	add	r3, r6
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	e768      	b.n	80077ca <_svfiprintf_r+0x4e>
 80078f8:	460c      	mov	r4, r1
 80078fa:	2001      	movs	r0, #1
 80078fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007900:	e7a6      	b.n	8007850 <_svfiprintf_r+0xd4>
 8007902:	2300      	movs	r3, #0
 8007904:	f04f 0c0a 	mov.w	ip, #10
 8007908:	4619      	mov	r1, r3
 800790a:	3401      	adds	r4, #1
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	4620      	mov	r0, r4
 8007910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007914:	3a30      	subs	r2, #48	; 0x30
 8007916:	2a09      	cmp	r2, #9
 8007918:	d903      	bls.n	8007922 <_svfiprintf_r+0x1a6>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0c6      	beq.n	80078ac <_svfiprintf_r+0x130>
 800791e:	9105      	str	r1, [sp, #20]
 8007920:	e7c4      	b.n	80078ac <_svfiprintf_r+0x130>
 8007922:	4604      	mov	r4, r0
 8007924:	2301      	movs	r3, #1
 8007926:	fb0c 2101 	mla	r1, ip, r1, r2
 800792a:	e7f0      	b.n	800790e <_svfiprintf_r+0x192>
 800792c:	ab03      	add	r3, sp, #12
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	462a      	mov	r2, r5
 8007932:	4638      	mov	r0, r7
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <_svfiprintf_r+0x1f8>)
 8007936:	a904      	add	r1, sp, #16
 8007938:	f3af 8000 	nop.w
 800793c:	1c42      	adds	r2, r0, #1
 800793e:	4606      	mov	r6, r0
 8007940:	d1d6      	bne.n	80078f0 <_svfiprintf_r+0x174>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	065b      	lsls	r3, r3, #25
 8007946:	f53f af2d 	bmi.w	80077a4 <_svfiprintf_r+0x28>
 800794a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800794c:	b01d      	add	sp, #116	; 0x74
 800794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4638      	mov	r0, r7
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <_svfiprintf_r+0x1f8>)
 800795c:	a904      	add	r1, sp, #16
 800795e:	f000 f87d 	bl	8007a5c <_printf_i>
 8007962:	e7eb      	b.n	800793c <_svfiprintf_r+0x1c0>
 8007964:	08007e62 	.word	0x08007e62
 8007968:	08007e68 	.word	0x08007e68
 800796c:	08007e6c 	.word	0x08007e6c
 8007970:	00000000 	.word	0x00000000
 8007974:	080076c9 	.word	0x080076c9

08007978 <_printf_common>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	4616      	mov	r6, r2
 800797e:	4699      	mov	r9, r3
 8007980:	688a      	ldr	r2, [r1, #8]
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	4607      	mov	r7, r0
 8007986:	4293      	cmp	r3, r2
 8007988:	bfb8      	it	lt
 800798a:	4613      	movlt	r3, r2
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007992:	460c      	mov	r4, r1
 8007994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007998:	b10a      	cbz	r2, 800799e <_printf_common+0x26>
 800799a:	3301      	adds	r3, #1
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	0699      	lsls	r1, r3, #26
 80079a2:	bf42      	ittt	mi
 80079a4:	6833      	ldrmi	r3, [r6, #0]
 80079a6:	3302      	addmi	r3, #2
 80079a8:	6033      	strmi	r3, [r6, #0]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	f015 0506 	ands.w	r5, r5, #6
 80079b0:	d106      	bne.n	80079c0 <_printf_common+0x48>
 80079b2:	f104 0a19 	add.w	sl, r4, #25
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	6832      	ldr	r2, [r6, #0]
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	42ab      	cmp	r3, r5
 80079be:	dc2b      	bgt.n	8007a18 <_printf_common+0xa0>
 80079c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079c4:	1e13      	subs	r3, r2, #0
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	bf18      	it	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	0692      	lsls	r2, r2, #26
 80079ce:	d430      	bmi.n	8007a32 <_printf_common+0xba>
 80079d0:	4649      	mov	r1, r9
 80079d2:	4638      	mov	r0, r7
 80079d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d8:	47c0      	blx	r8
 80079da:	3001      	adds	r0, #1
 80079dc:	d023      	beq.n	8007a26 <_printf_common+0xae>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	f003 0306 	and.w	r3, r3, #6
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	bf14      	ite	ne
 80079ea:	2500      	movne	r5, #0
 80079ec:	6833      	ldreq	r3, [r6, #0]
 80079ee:	f04f 0600 	mov.w	r6, #0
 80079f2:	bf08      	it	eq
 80079f4:	68e5      	ldreq	r5, [r4, #12]
 80079f6:	f104 041a 	add.w	r4, r4, #26
 80079fa:	bf08      	it	eq
 80079fc:	1aed      	subeq	r5, r5, r3
 80079fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a02:	bf08      	it	eq
 8007a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	bfc4      	itt	gt
 8007a0c:	1a9b      	subgt	r3, r3, r2
 8007a0e:	18ed      	addgt	r5, r5, r3
 8007a10:	42b5      	cmp	r5, r6
 8007a12:	d11a      	bne.n	8007a4a <_printf_common+0xd2>
 8007a14:	2000      	movs	r0, #0
 8007a16:	e008      	b.n	8007a2a <_printf_common+0xb2>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	4638      	mov	r0, r7
 8007a20:	47c0      	blx	r8
 8007a22:	3001      	adds	r0, #1
 8007a24:	d103      	bne.n	8007a2e <_printf_common+0xb6>
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2e:	3501      	adds	r5, #1
 8007a30:	e7c1      	b.n	80079b6 <_printf_common+0x3e>
 8007a32:	2030      	movs	r0, #48	; 0x30
 8007a34:	18e1      	adds	r1, r4, r3
 8007a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a40:	4422      	add	r2, r4
 8007a42:	3302      	adds	r3, #2
 8007a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a48:	e7c2      	b.n	80079d0 <_printf_common+0x58>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4638      	mov	r0, r7
 8007a52:	47c0      	blx	r8
 8007a54:	3001      	adds	r0, #1
 8007a56:	d0e6      	beq.n	8007a26 <_printf_common+0xae>
 8007a58:	3601      	adds	r6, #1
 8007a5a:	e7d9      	b.n	8007a10 <_printf_common+0x98>

08007a5c <_printf_i>:
 8007a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	7e0f      	ldrb	r7, [r1, #24]
 8007a62:	4691      	mov	r9, r2
 8007a64:	2f78      	cmp	r7, #120	; 0x78
 8007a66:	4680      	mov	r8, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	469a      	mov	sl, r3
 8007a6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a72:	d807      	bhi.n	8007a84 <_printf_i+0x28>
 8007a74:	2f62      	cmp	r7, #98	; 0x62
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x32>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	f000 80d5 	beq.w	8007c28 <_printf_i+0x1cc>
 8007a7e:	2f58      	cmp	r7, #88	; 0x58
 8007a80:	f000 80c1 	beq.w	8007c06 <_printf_i+0x1aa>
 8007a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a8c:	e03a      	b.n	8007b04 <_printf_i+0xa8>
 8007a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a92:	2b15      	cmp	r3, #21
 8007a94:	d8f6      	bhi.n	8007a84 <_printf_i+0x28>
 8007a96:	a101      	add	r1, pc, #4	; (adr r1, 8007a9c <_printf_i+0x40>)
 8007a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007a85 	.word	0x08007a85
 8007aa8:	08007a85 	.word	0x08007a85
 8007aac:	08007a85 	.word	0x08007a85
 8007ab0:	08007a85 	.word	0x08007a85
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007a85 	.word	0x08007a85
 8007abc:	08007a85 	.word	0x08007a85
 8007ac0:	08007a85 	.word	0x08007a85
 8007ac4:	08007a85 	.word	0x08007a85
 8007ac8:	08007c0f 	.word	0x08007c0f
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007bc9 	.word	0x08007bc9
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	08007a85 	.word	0x08007a85
 8007adc:	08007c31 	.word	0x08007c31
 8007ae0:	08007a85 	.word	0x08007a85
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007a85 	.word	0x08007a85
 8007aec:	08007a85 	.word	0x08007a85
 8007af0:	08007bd1 	.word	0x08007bd1
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	602a      	str	r2, [r5, #0]
 8007afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0a0      	b.n	8007c4a <_printf_i+0x1ee>
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	0607      	lsls	r7, r0, #24
 8007b0e:	f103 0104 	add.w	r1, r3, #4
 8007b12:	6029      	str	r1, [r5, #0]
 8007b14:	d501      	bpl.n	8007b1a <_printf_i+0xbe>
 8007b16:	681e      	ldr	r6, [r3, #0]
 8007b18:	e003      	b.n	8007b22 <_printf_i+0xc6>
 8007b1a:	0646      	lsls	r6, r0, #25
 8007b1c:	d5fb      	bpl.n	8007b16 <_printf_i+0xba>
 8007b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	da03      	bge.n	8007b2e <_printf_i+0xd2>
 8007b26:	232d      	movs	r3, #45	; 0x2d
 8007b28:	4276      	negs	r6, r6
 8007b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2e:	230a      	movs	r3, #10
 8007b30:	4859      	ldr	r0, [pc, #356]	; (8007c98 <_printf_i+0x23c>)
 8007b32:	e012      	b.n	8007b5a <_printf_i+0xfe>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	6029      	str	r1, [r5, #0]
 8007b3c:	0605      	lsls	r5, r0, #24
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0xe8>
 8007b40:	681e      	ldr	r6, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0xee>
 8007b44:	0641      	lsls	r1, r0, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0xe4>
 8007b48:	881e      	ldrh	r6, [r3, #0]
 8007b4a:	2f6f      	cmp	r7, #111	; 0x6f
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2308      	moveq	r3, #8
 8007b50:	230a      	movne	r3, #10
 8007b52:	4851      	ldr	r0, [pc, #324]	; (8007c98 <_printf_i+0x23c>)
 8007b54:	2100      	movs	r1, #0
 8007b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5a:	6865      	ldr	r5, [r4, #4]
 8007b5c:	2d00      	cmp	r5, #0
 8007b5e:	bfa8      	it	ge
 8007b60:	6821      	ldrge	r1, [r4, #0]
 8007b62:	60a5      	str	r5, [r4, #8]
 8007b64:	bfa4      	itt	ge
 8007b66:	f021 0104 	bicge.w	r1, r1, #4
 8007b6a:	6021      	strge	r1, [r4, #0]
 8007b6c:	b90e      	cbnz	r6, 8007b72 <_printf_i+0x116>
 8007b6e:	2d00      	cmp	r5, #0
 8007b70:	d04b      	beq.n	8007c0a <_printf_i+0x1ae>
 8007b72:	4615      	mov	r5, r2
 8007b74:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b78:	fb03 6711 	mls	r7, r3, r1, r6
 8007b7c:	5dc7      	ldrb	r7, [r0, r7]
 8007b7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b82:	4637      	mov	r7, r6
 8007b84:	42bb      	cmp	r3, r7
 8007b86:	460e      	mov	r6, r1
 8007b88:	d9f4      	bls.n	8007b74 <_printf_i+0x118>
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d10b      	bne.n	8007ba6 <_printf_i+0x14a>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07de      	lsls	r6, r3, #31
 8007b92:	d508      	bpl.n	8007ba6 <_printf_i+0x14a>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	6861      	ldr	r1, [r4, #4]
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	bfde      	ittt	le
 8007b9c:	2330      	movle	r3, #48	; 0x30
 8007b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	6122      	str	r2, [r4, #16]
 8007baa:	464b      	mov	r3, r9
 8007bac:	4621      	mov	r1, r4
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f8cd a000 	str.w	sl, [sp]
 8007bb4:	aa03      	add	r2, sp, #12
 8007bb6:	f7ff fedf 	bl	8007978 <_printf_common>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d14a      	bne.n	8007c54 <_printf_i+0x1f8>
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	b004      	add	sp, #16
 8007bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	f043 0320 	orr.w	r3, r3, #32
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	2778      	movs	r7, #120	; 0x78
 8007bd2:	4832      	ldr	r0, [pc, #200]	; (8007c9c <_printf_i+0x240>)
 8007bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	6829      	ldr	r1, [r5, #0]
 8007bdc:	061f      	lsls	r7, r3, #24
 8007bde:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be2:	d402      	bmi.n	8007bea <_printf_i+0x18e>
 8007be4:	065f      	lsls	r7, r3, #25
 8007be6:	bf48      	it	mi
 8007be8:	b2b6      	uxthmi	r6, r6
 8007bea:	07df      	lsls	r7, r3, #31
 8007bec:	bf48      	it	mi
 8007bee:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf2:	6029      	str	r1, [r5, #0]
 8007bf4:	bf48      	it	mi
 8007bf6:	6023      	strmi	r3, [r4, #0]
 8007bf8:	b91e      	cbnz	r6, 8007c02 <_printf_i+0x1a6>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	f023 0320 	bic.w	r3, r3, #32
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	2310      	movs	r3, #16
 8007c04:	e7a6      	b.n	8007b54 <_printf_i+0xf8>
 8007c06:	4824      	ldr	r0, [pc, #144]	; (8007c98 <_printf_i+0x23c>)
 8007c08:	e7e4      	b.n	8007bd4 <_printf_i+0x178>
 8007c0a:	4615      	mov	r5, r2
 8007c0c:	e7bd      	b.n	8007b8a <_printf_i+0x12e>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	6826      	ldr	r6, [r4, #0]
 8007c12:	1d18      	adds	r0, r3, #4
 8007c14:	6961      	ldr	r1, [r4, #20]
 8007c16:	6028      	str	r0, [r5, #0]
 8007c18:	0635      	lsls	r5, r6, #24
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	d501      	bpl.n	8007c22 <_printf_i+0x1c6>
 8007c1e:	6019      	str	r1, [r3, #0]
 8007c20:	e002      	b.n	8007c28 <_printf_i+0x1cc>
 8007c22:	0670      	lsls	r0, r6, #25
 8007c24:	d5fb      	bpl.n	8007c1e <_printf_i+0x1c2>
 8007c26:	8019      	strh	r1, [r3, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4615      	mov	r5, r2
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	e7bc      	b.n	8007baa <_printf_i+0x14e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	2100      	movs	r1, #0
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	602a      	str	r2, [r5, #0]
 8007c38:	681d      	ldr	r5, [r3, #0]
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f859 	bl	8007cf4 <memchr>
 8007c42:	b108      	cbz	r0, 8007c48 <_printf_i+0x1ec>
 8007c44:	1b40      	subs	r0, r0, r5
 8007c46:	6060      	str	r0, [r4, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c52:	e7aa      	b.n	8007baa <_printf_i+0x14e>
 8007c54:	462a      	mov	r2, r5
 8007c56:	4649      	mov	r1, r9
 8007c58:	4640      	mov	r0, r8
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	47d0      	blx	sl
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d0ad      	beq.n	8007bbe <_printf_i+0x162>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	079b      	lsls	r3, r3, #30
 8007c66:	d413      	bmi.n	8007c90 <_printf_i+0x234>
 8007c68:	68e0      	ldr	r0, [r4, #12]
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4618      	movlt	r0, r3
 8007c72:	e7a6      	b.n	8007bc2 <_printf_i+0x166>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4632      	mov	r2, r6
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	47d0      	blx	sl
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d09d      	beq.n	8007bbe <_printf_i+0x162>
 8007c82:	3501      	adds	r5, #1
 8007c84:	68e3      	ldr	r3, [r4, #12]
 8007c86:	9903      	ldr	r1, [sp, #12]
 8007c88:	1a5b      	subs	r3, r3, r1
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	dcf2      	bgt.n	8007c74 <_printf_i+0x218>
 8007c8e:	e7eb      	b.n	8007c68 <_printf_i+0x20c>
 8007c90:	2500      	movs	r5, #0
 8007c92:	f104 0619 	add.w	r6, r4, #25
 8007c96:	e7f5      	b.n	8007c84 <_printf_i+0x228>
 8007c98:	08007e73 	.word	0x08007e73
 8007c9c:	08007e84 	.word	0x08007e84

08007ca0 <memmove>:
 8007ca0:	4288      	cmp	r0, r1
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	eb01 0402 	add.w	r4, r1, r2
 8007ca8:	d902      	bls.n	8007cb0 <memmove+0x10>
 8007caa:	4284      	cmp	r4, r0
 8007cac:	4623      	mov	r3, r4
 8007cae:	d807      	bhi.n	8007cc0 <memmove+0x20>
 8007cb0:	1e43      	subs	r3, r0, #1
 8007cb2:	42a1      	cmp	r1, r4
 8007cb4:	d008      	beq.n	8007cc8 <memmove+0x28>
 8007cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cbe:	e7f8      	b.n	8007cb2 <memmove+0x12>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4402      	add	r2, r0
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	d100      	bne.n	8007cca <memmove+0x2a>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cd2:	e7f7      	b.n	8007cc4 <memmove+0x24>

08007cd4 <_sbrk_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4d05      	ldr	r5, [pc, #20]	; (8007cf0 <_sbrk_r+0x1c>)
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f9 fe64 	bl	80019ac <_sbrk>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_sbrk_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_sbrk_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20000424 	.word	0x20000424

08007cf4 <memchr>:
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	b2c9      	uxtb	r1, r1
 8007cfa:	4402      	add	r2, r0
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	d101      	bne.n	8007d06 <memchr+0x12>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e003      	b.n	8007d0e <memchr+0x1a>
 8007d06:	7804      	ldrb	r4, [r0, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	428c      	cmp	r4, r1
 8007d0c:	d1f6      	bne.n	8007cfc <memchr+0x8>
 8007d0e:	bd10      	pop	{r4, pc}

08007d10 <memcpy>:
 8007d10:	440a      	add	r2, r1
 8007d12:	4291      	cmp	r1, r2
 8007d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d18:	d100      	bne.n	8007d1c <memcpy+0xc>
 8007d1a:	4770      	bx	lr
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d28:	d1f9      	bne.n	8007d1e <memcpy+0xe>
 8007d2a:	bd10      	pop	{r4, pc}

08007d2c <_realloc_r>:
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	4680      	mov	r8, r0
 8007d32:	4614      	mov	r4, r2
 8007d34:	460e      	mov	r6, r1
 8007d36:	b921      	cbnz	r1, 8007d42 <_realloc_r+0x16>
 8007d38:	4611      	mov	r1, r2
 8007d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3e:	f7ff bc37 	b.w	80075b0 <_malloc_r>
 8007d42:	b92a      	cbnz	r2, 8007d50 <_realloc_r+0x24>
 8007d44:	f7ff fbcc 	bl	80074e0 <_free_r>
 8007d48:	4625      	mov	r5, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d50:	f000 f81b 	bl	8007d8a <_malloc_usable_size_r>
 8007d54:	4284      	cmp	r4, r0
 8007d56:	4607      	mov	r7, r0
 8007d58:	d802      	bhi.n	8007d60 <_realloc_r+0x34>
 8007d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d5e:	d812      	bhi.n	8007d86 <_realloc_r+0x5a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4640      	mov	r0, r8
 8007d64:	f7ff fc24 	bl	80075b0 <_malloc_r>
 8007d68:	4605      	mov	r5, r0
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0ed      	beq.n	8007d4a <_realloc_r+0x1e>
 8007d6e:	42bc      	cmp	r4, r7
 8007d70:	4622      	mov	r2, r4
 8007d72:	4631      	mov	r1, r6
 8007d74:	bf28      	it	cs
 8007d76:	463a      	movcs	r2, r7
 8007d78:	f7ff ffca 	bl	8007d10 <memcpy>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4640      	mov	r0, r8
 8007d80:	f7ff fbae 	bl	80074e0 <_free_r>
 8007d84:	e7e1      	b.n	8007d4a <_realloc_r+0x1e>
 8007d86:	4635      	mov	r5, r6
 8007d88:	e7df      	b.n	8007d4a <_realloc_r+0x1e>

08007d8a <_malloc_usable_size_r>:
 8007d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8e:	1f18      	subs	r0, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bfbc      	itt	lt
 8007d94:	580b      	ldrlt	r3, [r1, r0]
 8007d96:	18c0      	addlt	r0, r0, r3
 8007d98:	4770      	bx	lr
	...

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
